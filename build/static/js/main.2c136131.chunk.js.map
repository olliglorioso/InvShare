{"version":3,"sources":["reducers/sidebarReducer.tsx","reducers/userLoggedReducer.ts","reducers/firstBuyReducer.ts","utils/notification.ts","reducers/actionNotificationReducer.ts","components/Other/otherComponentsStyles.module.js","components/Other/AppBar.tsx","graphql/queries.ts","utils/helpers.ts","components/LoginRoute/loginRouteStyles.module.js","tsUtils/typeGuards.ts","components/LoginRoute/LoginForm.tsx","components/LoginRoute/SignUpForm.tsx","components/LoginRoute/LoginPage.tsx","reducers/buyingStockReducer.ts","components/Other/LoadingAnimation.tsx","components/BuyStocksRoute/buyStocksRouteStyles.module.js","components/BuyStocksRoute/MainChart.tsx","components/BuyStocksRoute/BuyStocks.tsx","components/BuyStocksRoute/StockPage.tsx","components/Other/SideBar.tsx","reducers/modeSwitchReducer.ts","components/MyProfileRoute/myProfileRouteStyles.module.js","components/MyProfileRoute/AnalysisTable.tsx","components/MyProfileRoute/OldData.tsx","components/MyProfileRoute/AnalysisChart.tsx","components/MyProfileRoute/TransactionList.tsx","components/MyProfileRoute/TutorialAnimation.tsx","components/MyProfileRoute/MyProfile.tsx","components/Other/DefaultPage.tsx","components/ExploreRoute/exploreRouteStyles.module.js","components/ExploreRoute/UserSearch.tsx","components/ExploreRoute/ExplorePage.tsx","components/ExploreRoute/SpecificExplore.tsx","components/ActionsRoute/actionsRouteStyles.module.js","components/ActionsRoute/ActionsPage.tsx","components/Other/Reset.tsx","components/Other/HealthCheck.tsx","App.tsx","index.tsx"],"names":["actionEnableSidebar","enableOrDisable","type","sidebarReducer","state","action","userLoggedReducer","username","localStorage","getItem","setItem","token","removeItem","firstBuyReducer","notification","title","message","store","addNotification","insert","container","animationIn","animationOut","dismiss","duration","onScreen","actionNotificationReducer","undefined","useStyles","makeStyles","theme","invShareLink","color","textDecoration","fontSize","menuButton","marginRight","spacing","appBarTitle","flexGrow","textAlign","loginLink","defaultPageTitle","display","justifyContent","fontWeight","paddingBottom","defaultPageDiv","background","paddingTop","margin","flexDirection","paper","divider","height","AppBar","stockSubscription","styles","dispatch","useDispatch","location","useLocation","userState","useSelector","user","notificationState","client","useApolloClient","history","useHistory","useEffect","trans","me","transactionDate","str","transactionStockAmount","transactionStock","stockSymbol","transactionStockPrice","transactionType","replace","style","Toolbar","IconButton","id","onClick","edge","className","Typography","variant","Button","to","pathname","clear","clearStore","push","e","logOut","STOCKDETAILS","gql","TRANSACTIONDETAILS","SEARCH_USER_FINAL","FOLLOW","ADD_USER","SELL_STOCK","UNFOLLOW","BUY_STOCK","LOGIN","SEARCH_USER","GET_OLD_DATA","GET_ACTIONS","CURRENT_PORTFOLIO_VALUE","ME","INDIVIDUAL_STOCK","RESET_DATABASE","STOCKEVENT","FOLLOWEVENT","finalMyDateOption","options","chart","fontFamily","toolbar","show","offsetX","offsetY","tools","download","selection","zoom","zoomin","zoomout","pan","reset","autoSelected","colors","stroke","width","StyledTableRow","styled","TableRow","backgroundColor","palette","hover","border","CssTextField","withStyles","root","borderBottomColor","borderColor","TextField","BuyStocksTextField","leadingZeros","num","toString","errorColor","loginButton","loginPageFirstDiv","loginPageDivs","loginDivider","isString","text","String","isNumber","numb","Number","parseUserInformation","userInformation","password","Error","length","parseCompany","company","ValidationSchema","Yup","shape","required","min","LoginForm","useMutation","login","loginResult","data","value","initialValues","onSubmit","a","parsedUserInfo","variables","validationSchema","handleSubmit","values","errors","handleChange","handleBlur","touched","label","onChange","onBlur","InputProps","startAdornment","InputAdornment","position","AccountCircle","LockRounded","max","password_again","oneOf","SignUpForm","addUser","confirmAlert","buttons","includes","name","LoginPage","Divider","changeStock","stock","price","changePrice","buyingStockReducer","stockName","stockPrice","LoadingAnimation","finalInformationTypography","animationLastTypography","loadingAnimationDiv","alignItems","chartError","stockPageFirstDiv","stockPageSecondDiv","stockPageAnimationDiv","paddingRight","stockPageAnimationTypography","buyStockFormButton","stockPageLastDiv","mainChartWidth","mainChartDiv","buyStocksHigherDiv","MainChart","props","parsedStock","useQuery","loading","rest","stockList","individualStock","map","b","close","date","finalOptions","xaxis","categories","x","labels","formatter","Date","getDate","getMonth","getHours","getMinutes","series","toUpperCase","y","toFixed","error","graphQLErrors","FinalInformation","amount","parsedPrice","parseFloat","parsePrice","parsedAmount","parseAmount","totalSum","PricePerStock","MonetizationOn","Company","companyName","setIsDisabled","currentName","parsedCompany","useState","setName","useDebounce","debounceName","event","target","autoComplete","Business","transform","parseInt","integer","BuyStocks","buyStock","isDisabled","purchase","price_per_stock","val","Add","inputProps","play","iterationCount","keyframes","disabled","StockPage","size","SideBar","sidebarState","sidebar","purchaseState","Drawer","anchor","open","onClose","classes","List","ListItem","button","ListItemText","inset","primary","NotificationsNone","ShowChart","Explore","modeSwitchReducer","mode","chartLoadingAnimation","tableCellTitles","oldDataButton","analysisTableButton","myProfileLoadingAnimation","myProfileMainDiv","myProfileCardTitle","flexWrap","myProfileCardInfos","flex","myProfileCardContentDiv","myProfileCardContentTypography","myProfileCardContentNumberGreen","myProfileCardContentNumberRed","myProfileButton","modeTitles","myProfileTransationList","myProfileAnalysisChartDiv","myProfileAnalysisSecondDIv","paddingLeft","oldDataDiv","transactionListDiv","transactionList","transactionListItem","black","transactionListCollapsedItem","animationSizes","tutorialMainText","tutorialArrow","tutorialTypography","AnalysisTable","analysisData","holdings","getOldData","TableContainer","component","Paper","Table","TableHead","TableCell","align","TableBody","correspondingPosition","filter","usersStock","profitPercent","sticks","usersTotalOriginalPriceValue","usersTotalAmount","scope","OldData","datas","oldDataError","sell","dates","time_series","o","options2","rotate","selectedStock","metadata","symbol","lastPrice","lastRefresh","input","AnalysisChart","totalOriginalValue","isTogglable","useLazyQuery","getData","res","chartMode","leastSticks","leastSticksStock","forEach","oneStock","prices","oneDate","sum","valueToAdd","oneStick","pos","biggestDiff","stickToSum","time","Math","abs","getTime","holding","concat","chartOptions","yaxis","isNaN","Switch","checked","stockHistory","TransactionList","transactionStates","transactions","_id","reduce","v","setOpen","transactionsWithOwner","transaction","index","dateFormat","getFullYear","prevState","ListItemIcon","ShoppingCart","Delete","transactionOwner","ExpandLess","ExpandMore","Collapse","in","timeout","disablePadding","KeyboardArrowRight","TutorialAnimation","MyProfile","followSubscriptions","meResult","daysData","hoursData","setMode","switchMode","refetch","currentPortfolioValue","errorMessage","usersHoldings","usersTransactions","acc","curr","currentProfitPercentage","wholeValue","padding","Card","CardHeader","avatar","usersUsername","followerCount","followingCount","CardContent","round","moneyMade","analysisValues","DefaultPage","specificExploreFirstDiv","specificExploreTypography","cardTitleDiv","cardTypography","followAmountsDiv","cardContentDiv","cardContentTypography","fontWeigt","followButton","searchField","borderRadius","exploreTitle","explorePageFirstDiv","explorePageSecondDiv","UserSearch","setFinalUser","parsedUsername","parseUsername","searchUser","searchResult","setOptions","active","Autocomplete","onOpen","getOptionLabel","option","popupIcon","autoHighlight","_event","newValue","autoSelect","noOptionsText","renderInput","params","Search","disableUnderline","ExplorePage","finalUser","refetchSearch","handleFinalSearch","response","then","SpecificExplore","useParams","searchResponse","follow","followResult","loggedUser","unfollow","unfollowResult","handleClick","handleClickUnfollow","usersFollowers","followType","noActionsTypography","noActionsDiv","loadingAnimation","ActionsPage","actionsResult","actions","getActions","item","Reset","result","resetDb","HealthCheck","App","userLogged","stockEvent","useSubscription","followEvent","path","exact","require","config","reducer","combineReducers","console","log","process","httpLink","HttpLink","uri","wsLink","WebSocketLink","reconnect","createStore","authLink","setContext","_","headers","authorization","splitLink","split","query","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","link","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2c136131.chunk.js","sourcesContent":["// SidebarReduer and its action creator.\r\nconst sidebarReducer = (state = false, action: { type: string }): boolean => {\r\n    switch (action.type) {\r\n    case \"ENABLE\":\r\n        return true;\r\n    case \"DISABLE\":\r\n        return false;\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport const actionEnableSidebar = (\r\n    enableOrDisable: string\r\n): { type: string } => {\r\n    return {\r\n        type: enableOrDisable,\r\n    };\r\n};\r\n\r\nexport default sidebarReducer;\r\n","// UserLoggedReducer and its action creators. \r\nconst userLoggedReducer = (\r\n    state = {username: (localStorage.getItem(\"loggedUser\") ? localStorage.getItem(\"loggedUser\") as string : \"\")},\r\n    action: { type: string; token: string, username?: string }\r\n): {username: string} => {\r\n    switch (action.type) {\r\n    case \"LOGIN\":\r\n        localStorage.setItem(\"usersToken\", action.token);\r\n        localStorage.setItem(\"loggedUser\", action.username as string);\r\n        return {username: action.username as string};\r\n    case \"LOGOUT\":\r\n        localStorage.removeItem(\"usersToken\");\r\n        localStorage.removeItem(\"loggedUser\");\r\n        return {username: \"\"};\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport const logUserIn = (token: string, username: string): { type: string; token: string, username: string } => {\r\n    return {\r\n        type: \"LOGIN\",\r\n        token,\r\n        username\r\n    };\r\n};\r\n\r\nexport const logUserOut = (): { type: string } => {\r\n    return {\r\n        type: \"LOGOUT\",\r\n    };\r\n};\r\n\r\nexport default userLoggedReducer;\r\n","// FirstBuyReducer and its action creators.\r\nconst firstBuyReducer = (state = true, action: { type: string }): boolean => {\r\n    switch (action.type) {\r\n    case \"NO_PURCHASES\":\r\n        return false;\r\n    case \"FIRST_PURCHASE\":\r\n        return true;\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport const buyFirstStock = () => {\r\n    return {\r\n        type: \"FIRST_PURCHASE\",\r\n    };\r\n};\r\n\r\nexport const noPurchases = () => {\r\n    return {\r\n        type: \"NO_PURCHASES\",\r\n    };\r\n};\r\n\r\nexport default firstBuyReducer;\r\n","import { ReactNotificationOptions, store } from \"react-notifications-component\";\r\nimport \"react-notifications-component/dist/theme.css\";\r\n\r\n// This function is used to show a notification with the help of react-notifications-component-library.\r\n\r\nconst notification = (title: string, message: string, type: ReactNotificationOptions[\"type\"]) => {\r\n    store.addNotification({\r\n        title,\r\n        message,\r\n        type,\r\n        insert: \"top\",\r\n        container: \"top-right\",\r\n        animationIn: [\"animate__animated\", \"animate__fadeIn\"],\r\n        animationOut: [\"animate__animated\", \"animate__fadeOut\"],\r\n        dismiss: {\r\n            duration: 5000,\r\n            onScreen: true,\r\n        },\r\n    });\r\n};\r\n\r\nexport default notification;\r\n","// ActionNotificationReducer and its action creator.\r\nconst actionNotificationReducer = (state = {notification: undefined}, action: {type: string, notification: string}\r\n): {notification: string | undefined} => {\r\n    switch (action.type) {\r\n    case \"SET_NOTIFICATION\":\r\n        return {\r\n            notification: action.notification\r\n        };\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport const newNotification = (notification: string) => {\r\n    return {\r\n        type: \"SET_NOTIFICATION\",\r\n        notification\r\n    };\r\n};\r\n\r\nexport default actionNotificationReducer;","import { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    invShareLink: {\r\n        color: \"white\", \r\n        textDecoration: \"none\", \r\n        fontSize: 20\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    appBarTitle: {\r\n        flexGrow: 1,\r\n        textAlign: \"center\",\r\n    },\r\n    loginLink: {\r\n        color: \"white\", \r\n        textDecoration: \"none\"\r\n    },\r\n    defaultPageTitle: {\r\n        display: \"flex\", \r\n        justifyContent: \"center\", \r\n        fontSize: 30, \r\n        fontWeight: \"bold\", \r\n        paddingBottom: 10\r\n    },\r\n    defaultPageDiv: {\r\n        background: \"white\",\r\n        paddingBottom: \"60vh\",\r\n        paddingTop: \"15vh\",\r\n        margin: 5,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    paper: {\r\n        background: \"black\",\r\n        color: \"white\",\r\n    },\r\n    divider: {\r\n        background: \"white\",\r\n        height: 3,\r\n    },\r\n}));\r\n\r\nexport default useStyles;","import React, { useEffect } from \"react\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { actionEnableSidebar } from \"../../reducers/sidebarReducer\";\r\nimport {\r\n    IconButton,\r\n    AppBar as MuiAppBar,\r\n    Toolbar,\r\n    Typography,\r\n    Button,\r\n} from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { RootState } from \"../..\";\r\nimport { useApolloClient } from \"@apollo/client\";\r\nimport { logUserOut } from \"../../reducers/userLoggedReducer\";\r\nimport { buyFirstStock } from \"../../reducers/firstBuyReducer\";\r\nimport notification from \"../../utils/notification\";\r\nimport { TransactionType } from \"../../tsUtils/types\";\r\nimport { newNotification } from \"../../reducers/actionNotificationReducer\";\r\nimport useStyles from \"./otherComponentsStyles.module\";\r\n\r\n// This component is the AppBar of the application, on top of the page all the time.\r\n\r\nconst AppBar = ({stockSubscription}: {stockSubscription: {trans: TransactionType, me: string}}): JSX.Element => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Initializing dispatch-function with useDispatch-hook.\r\n    const dispatch = useDispatch();\r\n    // Getting the current location (url).\r\n    const location = useLocation();\r\n    // Getting the state of the user (logged in or not).\r\n    const userState = useSelector<RootState, string>((state) => state.user.username);\r\n    // State of notification. This helps us to recognize if notification (especially information-type notification) is already shown.\r\n    const notificationState = useSelector<RootState, {notification: string}>((state) => state.notification);\r\n    // Apollo client.\r\n    const client = useApolloClient();\r\n    // History to push the user to the correct page.\r\n    const history = useHistory();\r\n\r\n    // Every time the current user or a user he/she follows buys/sells a stock, the \r\n    // following useEffect will be executed.\r\n    useEffect(() => {\r\n        // A few conditions: stockSubscription can't be undefined, stockSubscription.me (A.K.A the user that bought/sold a stock) can't be same user\r\n        // as the current user (we don't want to show two notifications), and the stockSubscription's notification can't be already shown.\r\n        if (stockSubscription.trans && stockSubscription.me !== userState && notificationState.notification !== stockSubscription.trans.transactionDate) {\r\n            // Dispatching the notification's \"id\", also it's date because it is always different than before, to the Redux store.\r\n            dispatch(newNotification(stockSubscription.trans.transactionDate));\r\n            // Storing the string, which will be displayer, to a variabel.\r\n            const str = `${stockSubscription.me} purchased ${stockSubscription.trans.transactionStockAmount} x ${stockSubscription.trans.transactionStock.stockSymbol} for ${stockSubscription.trans.transactionStockPrice}`;\r\n            // Different messages based on the transaction type.\r\n            const message = stockSubscription.trans.transactionType === \"Buy\"\r\n                ? str\r\n                : str.replace(\"purchased\", \"sold\");\r\n            notification(\"Notification\", message, \"info\");\r\n      \r\n        }\r\n    }, [stockSubscription]);\r\n\r\n    // When the user presses the Log out -button, this function will be executed.\r\n    const logOut = () => {\r\n        try {\r\n            // Clearing localStorage.\r\n            localStorage.clear();\r\n            // Clearing Apollo client.\r\n            client.clearStore();\r\n            // Dispatching the logUserOut action, so that the Redux store will know that the user is logged out.\r\n            // We dispatch buyFirstStock-action, so that we avoid bugs.\r\n            dispatch(logUserOut());\r\n            dispatch(buyFirstStock());\r\n            // Pushing to the default page.\r\n            history.push(\"/\");\r\n        } catch (e) {\r\n            notification(\"An error occured.\", \"Error while logging out.\", \"danger\");\r\n        }\r\n    };\r\n    // Rendering App bar.\r\n    return (\r\n        <div>\r\n            <MuiAppBar style={{ background: \"black\" }}>\r\n                <Toolbar>\r\n                    <div>\r\n                        {userState  // Sidebar-button won't be shown if the user has logged out.\r\n                            ? <IconButton\r\n                                id=\"sideBarButton\"\r\n                                onClick={() => dispatch(actionEnableSidebar(\"ENABLE\"))}\r\n                                edge=\"start\"\r\n                                className={styles.menuButton}\r\n                                color=\"inherit\"\r\n                                aria-label=\"menu\"\r\n                            >\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                            : <div></div>}\r\n                    </div>\r\n                    <Typography className={styles.appBarTitle} variant=\"h6\">\r\n                        <Button>\r\n                            <Link\r\n                                to=\"/\"\r\n                                className={styles.invShareLink}\r\n                            >\r\n                                InvShare\r\n                            </Link>\r\n                        </Button>\r\n                    </Typography>\r\n                    {location.pathname === \"/login\" \r\n                        ? <div></div>\r\n                        : userState \r\n                            ? <div></div>\r\n                            : (\r\n                                <Button id=\"loginButton\" color=\"inherit\">\r\n                                    <Link\r\n                                        to=\"/login\"\r\n                                        className={styles.loginLink}\r\n                                    >\r\n                                        Log in / sign up\r\n                                    </Link>\r\n                                </Button>)}\r\n                    {userState \r\n                        ? <Button onClick={() => logOut()} style={{ color: \"white\" }}>Log out</Button>\r\n                        : <div></div>}\r\n                </Toolbar>\r\n            </MuiAppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AppBar;\r\n","import { gql } from \"@apollo/client\";\r\n\r\n// This is the file that handles all of the queries' schemas for the frontend.\r\n\r\n// First of all, a couple fragments to avoid repetition.\r\nconst STOCKDETAILS = gql`\r\n  fragment StockDetails on IndividualStock {\r\n    close\r\n    date\r\n    high\r\n    low\r\n    open\r\n    volume\r\n  }\r\n`;\r\n\r\nconst TRANSACTIONDETAILS = gql`\r\n  fragment TransactionDetails on Transaction {\r\n    transactionDate\r\n    transactionStock {\r\n      stockSymbol\r\n      stockTotalAmount\r\n    }\r\n    transactionStockAmount\r\n    transactionStockPrice\r\n    transactionType\r\n    _id\r\n  }\r\n`;\r\n\r\nexport const SEARCH_USER_FINAL = gql`\r\n  query searchUser($username: String!) {\r\n    searchUser(username: $username) {\r\n      usersUsername\r\n      usersFollowers {\r\n        user {\r\n          usersUsername\r\n        }\r\n      }\r\n      usersHoldings {\r\n        usersStock {\r\n          stockTotalAmount\r\n          stockSymbol\r\n        }\r\n        usersTotalAmount\r\n        usersTotalOriginalPriceValue\r\n      }\r\n      usersTransactions {\r\n        ...TransactionDetails\r\n      }\r\n      moneyMade\r\n      followerCount\r\n      followingCount\r\n    }\r\n  }\r\n  ${TRANSACTIONDETAILS}\r\n`;\r\n\r\n// Mutations: \r\nexport const FOLLOW = gql`\r\n  mutation follow($username: String!) {\r\n    followUser(username: $username) {\r\n      result\r\n    }\r\n  }\r\n`;\r\n\r\nconst ADD_USER = gql`\r\n  mutation addUser($username: String!, $password: String!) {\r\n    addUser(username: $username, password: $password) {\r\n      usersUsername\r\n    }\r\n  }\r\n`;\r\n\r\nexport const SELL_STOCK = gql`\r\n  mutation sellStock($stockName: String!, $amount: Int!, $price: Float!) {\r\n    sellStock(stockName: $stockName, amount: $amount, price: $price) {\r\n      ...TransactionDetails\r\n    }\r\n  }\r\n  ${TRANSACTIONDETAILS}\r\n`;\r\n\r\nexport const UNFOLLOW = gql`\r\n  mutation unfollowUser($username: String!) {\r\n    unfollowUser(username: $username) {\r\n      result\r\n    }\r\n  }\r\n`;\r\n\r\nexport const BUY_STOCK = gql`\r\n  mutation buyStock($stockName: String!, $amount: Int!) {\r\n    buyStock(stockName: $stockName, amount: $amount) {\r\n      ...TransactionDetails\r\n    }\r\n  }\r\n  ${TRANSACTIONDETAILS}\r\n`;\r\nexport const LOGIN = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      value\r\n      username\r\n    }\r\n  }\r\n`;\r\n\r\n// Queries: \r\nexport const SEARCH_USER = gql`\r\n  query searchUser($username: String!) {\r\n    searchUser(username: $username) {\r\n      usersUsername\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_OLD_DATA = gql`\r\n  query stockHistory($symbol: String!) {\r\n    stockHistory(symbol: $symbol) {\r\n      time_series {\r\n        date\r\n        value\r\n      }\r\n      metadata {\r\n        information\r\n        symbol\r\n        lastRefresh\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ACTIONS = gql`\r\n  query GetActions {\r\n    getActions {\r\n      transaction {\r\n        ...TransactionDetails\r\n      }\r\n      transactionOwner\r\n    }\r\n  }\r\n  ${TRANSACTIONDETAILS}\r\n`;\r\n\r\nexport const CURRENT_PORTFOLIO_VALUE = gql`\r\n  query cpv($mode: String!) {\r\n    currentPortfolioValue(mode: $mode) {\r\n      wholeValue\r\n      analysisValues {\r\n        name\r\n        sticks {\r\n          ...StockDetails\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ${STOCKDETAILS}\r\n`;\r\n\r\nexport const ME = gql`\r\n  query {\r\n    me {\r\n      usersUsername\r\n      usersHoldings {\r\n        usersStock {\r\n          stockTotalAmount\r\n          stockSymbol\r\n        }\r\n        usersTotalAmount\r\n        usersTotalOriginalPriceValue\r\n      }\r\n      usersTransactions {\r\n        ...TransactionDetails\r\n      }\r\n      moneyMade\r\n      followerCount\r\n      followingCount\r\n    }\r\n  }\r\n  ${TRANSACTIONDETAILS}\r\n`;\r\n\r\nexport const INDIVIDUAL_STOCK = gql`\r\n  query individualStock($company: String!) {\r\n    individualStock(company: $company) {\r\n      ...StockDetails\r\n    }\r\n  }\r\n  ${STOCKDETAILS}\r\n`;\r\n\r\n// Reset test database:\r\nexport const RESET_DATABASE = gql`\r\n  mutation resetDatabase {\r\n    resetDatabase {\r\n      result\r\n    }\r\n  }\r\n`;\r\n\r\n// Subscriptions: \r\nexport const STOCKEVENT = gql`\r\n  subscription StockEvent ($username: String) {\r\n    stockEvent (username: $username){\r\n      transaction {\r\n        ...TransactionDetails\r\n      }\r\n      me\r\n    }\r\n  }\r\n  ${TRANSACTIONDETAILS}\r\n`;\r\n\r\nexport const FOLLOWEVENT = gql`\r\n  subscription followEvent ($username: String){\r\n    followEvent (username: $username) {\r\n      auteur\r\n      object\r\n      followType\r\n      date\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport default ADD_USER;\r\n","import { withStyles } from \"@material-ui/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { styled } from \"@material-ui/core\";\r\nimport { TableRow } from \"@material-ui/core\";\r\n\r\n// These are some variables that are used to succesfully display the charts. There were problems with TypeScript and ApexChart and this solved them.\r\nconst zoomOption = \"zoom\";\r\nconst finalZoomOption: \"zoom\" | \"selection\" | \"pan\" | undefined = zoomOption as\r\n  | \"zoom\"\r\n  | \"selection\"\r\n  | \"pan\"\r\n  | undefined;\r\n\r\nconst myDateOption = \"category\";\r\nexport const finalMyDateOption: \"datetime\" | \"category\" | \"numeric\" | undefined =\r\n  myDateOption as \"datetime\" | \"category\" | \"numeric\" | undefined;\r\n\r\n// This adds leading zeros to given numbers (8 => 08 etc.).\r\nconst leadingZeros = (num: number): string => {\r\n    if (num < 10) {\r\n        return \"0\" + num.toString();\r\n    } else {\r\n        return num.toString();\r\n    }\r\n};\r\n\r\n// Default options for ApexCharts.\r\nexport const options = {\r\n    chart: {\r\n        id: \"börse\",\r\n        fontFamily: \"Roboto\",\r\n        background: \"FFFFFF\",\r\n        toolbar: {\r\n            show: true,\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            tools: {\r\n                download: false,\r\n                selection: false,\r\n                zoom: \"<img src=\\\"https://image.flaticon.com/icons/png/512/1086/1086933.png\\\" style=\\\"padding-top: 3px;\\\" width=\\\"22\\\">\",\r\n                zoomin: false,\r\n                zoomout: false,\r\n                pan: \"<img src=\\\"https://image.flaticon.com/icons/png/512/1/1427.png\\\" width=\\\"30\\\">\",\r\n                reset:\r\n        \"<img src=\\\"https://image.flaticon.com/icons/png/512/32/32303.png\\\" width=\\\"22\\\" style=\\\"padding-top: 3px;\\\">\",\r\n            },\r\n            autoSelected: finalZoomOption,\r\n        },\r\n    },\r\n    colors: [\"#000000\", \"#000000\"],\r\n    stroke: {\r\n        width: 1,\r\n    },\r\n};\r\n\r\n// Styled table row (wanted to edit the default MUI Table row).\r\nexport const StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    \"&:nth-of-type(odd)\": {\r\n        backgroundColor: theme.palette.action.hover,\r\n    },\r\n    \"&:last-child td, &:last-child th\": {\r\n        border: 0,\r\n    },\r\n}));\r\n\r\n// Styled text field (wanted to edit the default MUI TextField).\r\nexport const CssTextField = withStyles({\r\n    root: {\r\n        \"& label.Mui-focused\": {\r\n            color: \"grey\",\r\n        },\r\n        \"& .MuiInput-underline:after\": {\r\n            borderBottomColor: \"black\",\r\n        },\r\n        \"& .MuiOutlinedInput-root\": {\r\n            \"& fieldset\": {\r\n                borderColor: \"grey\",\r\n            },\r\n            \"&:hover fieldset\": {\r\n                borderColor: \"grey\",\r\n            },\r\n            \"&.Mui-focused fieldset\": {\r\n                borderColor: \"black\",\r\n            },\r\n        },\r\n    },\r\n})(TextField);\r\n\r\n// Styled text field (wanted to edit the default MUI TextField).\r\nexport const BuyStocksTextField = withStyles({\r\n    root: {\r\n        \"& label.Mui-focused\": {\r\n            color: \"grey\",\r\n        },\r\n        \"& .MuiInput-underline:after\": {\r\n            borderBottomColor: \"black\",\r\n        },\r\n        \"& .MuiOutlinedInput-root\": {\r\n            \"& fieldset\": {\r\n                borderColor: \"grey\",\r\n            },\r\n            \"&:hover fieldset\": {\r\n                borderColor: \"grey\",\r\n            },\r\n            \"&.Mui-focused fieldset\": {\r\n                borderColor: \"black\",\r\n            },\r\n        },\r\n        \"width\": \"20vw\"\r\n    },\r\n})(TextField);\r\n\r\nexport default leadingZeros;\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    errorColor: {\r\n        color: \"red\",\r\n    },\r\n    loginButton: {\r\n        background: \"black\", color: \"white\", width: 255\r\n    },\r\n    loginPageFirstDiv: {\r\n        background: \"white\",\r\n        paddingBottom: \"60vh\",\r\n        paddingTop: \"15vh\",\r\n        margin: \"5\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    loginPageDivs: { display: \"flex\", justifyContent: \"center\" },\r\n    loginDivider: { width: \"90%\", color: \"grey\", height: 2 }\r\n});\r\n\r\nexport default useStyles;","import notification from \"../utils/notification\";\r\nimport { UserInformation } from \"./types\";\r\n// This function includes essential functions, so called \"type guards\",\r\n// to check if the type of the user input is correct and valid. \r\n\r\n// This function check if a supposed-text is string and turns it into a string.\r\nexport const isString = (text: unknown): text is string => {\r\n    return typeof text === \"string\" || text instanceof String;\r\n};\r\n\r\n// This function check if a supposed-number is number and turns it into a number.\r\nexport const isNumber = (numb: unknown): numb is number => {\r\n    return numb instanceof Number || typeof numb === \"number\";\r\n};\r\n\r\n// Parses UserInformation (username and password).\r\nexport const parseUserInformation = (userInformation: UserInformation): UserInformation => {\r\n    if (!userInformation || !userInformation.username || !userInformation.password || \r\n        !isString(userInformation.username) || !isString(userInformation.password)) {\r\n        notification(\"Error.\", \"Incorrect type of username or password\", \"danger\");\r\n        throw new Error(\"Incorrect type of username or password.\");\r\n    }\r\n    if (userInformation.username.length < 4) {\r\n        notification(\"Error.\", \"Username must be at least 4 characters long.\", \"danger\");\r\n        throw new Error(\"Username too short.\");\r\n    }\r\n    if (userInformation.password.length < 8) {\r\n        notification(\"Error.\", \"Password must be at most 8 characters long.\", \"danger\");\r\n        throw new Error(\"Password too short.\");\r\n    }\r\n    return userInformation;\r\n};\r\n\r\n// Parse username.\r\nexport const parseUsername = (username: unknown): string => {\r\n    if (!isString(username)) {\r\n        notification(\"Error.\", \"Username must be a string.\", \"danger\");\r\n        throw new Error(\"Username must be a string.\");\r\n    }\r\n    return username;\r\n};\r\n\r\n// Parse amount.\r\nexport const parseAmount = (amount: unknown): string => {\r\n    if (isNumber(amount)) {\r\n        return amount.toString();\r\n    } else if (isString(amount)) {\r\n        return amount;\r\n    }\r\n    notification(\"Error.\", \"Amount is neither a number nor a string.\", \"danger\");\r\n    throw new Error(\"Amount is neither a number nor a string.\");\r\n};\r\n\r\n// Parse company/symbol/stock.\r\nexport const parseCompany = (company: unknown): string => {\r\n    if (isString(company)) {\r\n        return company;\r\n    }\r\n    notification(\"Error.\", \"Company is not a string.\", \"danger\");\r\n    throw new Error(\"Company is not a string.\");\r\n};\r\n\r\n// Parse price.\r\nexport const parsePrice = (price: unknown): number => {\r\n    if (isNumber(price)) {\r\n        return price;\r\n    }\r\n    if (isString(price)) {\r\n        return parseFloat(price);\r\n    }\r\n    notification(\"Error.\", \"Price is neither a number nor a string.\", \"danger\");\r\n    throw new Error(\"Could not parse price\");\r\n};","import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Button, InputAdornment } from \"@material-ui/core\";\r\nimport { AccountCircle, LockRounded } from \"@material-ui/icons\";\r\nimport { LOGIN } from \"../../graphql/queries\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { logUserIn } from \"../../reducers/userLoggedReducer\";\r\nimport * as Yup from \"yup\";\r\nimport { CssTextField } from \"../../utils/helpers\";\r\nimport notification from \"../../utils/notification\";\r\nimport useStyles from \"./loginRouteStyles.module\";\r\nimport { parseUserInformation } from \"../../tsUtils/typeGuards\";\r\n\r\n// This component is used to render the login form.\r\n// Validation schema for the form.\r\nconst ValidationSchema = Yup.object().shape({\r\n    // Username is required and its min length is 4.\r\n    username: Yup.string()\r\n        .required(\"Required field.\")\r\n        .min(4, \"Must be at least 4 characters.\"),\r\n    // Password is required and its min length is 8.\r\n    password: Yup.string()\r\n        .required(\"Required field.\")\r\n        .min(8, \"Must be at least 8 characters.\"),\r\n});\r\n\r\nconst LoginForm = (): JSX.Element => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Login-mutation initialized with useMutation-hook.\r\n    const [login, loginResult] = useMutation(LOGIN);\r\n    // Dispatch-function initialized with useDispatch-hook.\r\n    const dispatch = useDispatch();\r\n    // History-object initialized with useHistory-hook.\r\n    const history = useHistory();\r\n    // Every time loginResult.data changes, we try to dispatch the result to the Redux-store and go to the default page.\r\n    useEffect(() => {\r\n        try {\r\n            dispatch(logUserIn(loginResult.data.login.value, loginResult.data.login.username));\r\n            history.push(\"/\");\r\n        } catch (e) {\r\n            return;\r\n        }\r\n    }, [loginResult.data]);\r\n    // Initial values (they are empty).\r\n    const initialValues = {\r\n        username: \"\",\r\n        password: \"\",\r\n    };\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            // When submit, we try to user login-mutation. If it fails, a notification is shown\r\n            // (the login was unsuccessfull.). If it succeeds, we dispatch the result to the Redux-store\r\n            // in the previous useEffect-hook and go to the default page.\r\n            onSubmit={async ({username, password}: { username: string, password: string }) => {\r\n                // Parsing inputted user information.\r\n                const parsedUserInfo = parseUserInformation({username, password});\r\n                try {\r\n                    await login({\r\n                        variables: { username: parsedUserInfo.username, password: parsedUserInfo.password },\r\n                    });\r\n                } catch (e: unknown) {\r\n                    notification(\"Failed.\", (e as Error).message, \"danger\");\r\n                }\r\n            }}\r\n            validationSchema={ValidationSchema}\r\n        >\r\n            {({\r\n                handleSubmit,\r\n                values,\r\n                errors,\r\n                handleChange,\r\n                handleBlur,\r\n                touched,\r\n            }) => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <p></p>\r\n                    <CssTextField\r\n                        id=\"username\"\r\n                        type=\"username\"\r\n                        variant=\"outlined\"\r\n                        label=\"Username\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.username}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <AccountCircle />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n\r\n                    {errors.username && touched.username \r\n                    // If there is an error and field is touched, ann error text is shown.\r\n                        ? \r\n                        (\r\n                            <div className={styles.errorColor}>{errors.username}</div>\r\n                        ) \r\n                        : null\r\n                    }\r\n                    <p></p>\r\n                    <CssTextField\r\n                        id=\"password\"\r\n                        type=\"password\"\r\n                        variant=\"outlined\"\r\n                        label=\"Password\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.password}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LockRounded />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {errors.password && touched.password \r\n                        ? \r\n                        (\r\n                            <div className={styles.errorColor}>{errors.password}</div>\r\n                        ) \r\n                        : null\r\n                    }\r\n                    <p></p>\r\n                    <Button\r\n                        id=\"tryToLoginButton\"\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                        className={styles.loginButton}\r\n                    >\r\n                        Log in\r\n                    </Button>\r\n                    <p style={{ fontSize: 20 }}></p>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Button, InputAdornment } from \"@material-ui/core\";\r\nimport { AccountCircle, LockRounded } from \"@material-ui/icons\";\r\nimport ADD_USER from \"../../graphql/queries\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CssTextField } from \"../../utils/helpers\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport * as Yup from \"yup\";\r\nimport notification from \"../../utils/notification\";\r\nimport useStyles from \"./loginRouteStyles.module\";\r\n\r\n// This component takes care of the sign up form.\r\n\r\n// Validation schema for it.\r\nconst ValidationSchema = Yup.object().shape({\r\n    // Username required and length between 4 and 15 chars.\r\n    username: Yup.string()\r\n        .min(4, \"Username must be at least 4 characters.\")\r\n        .max(15, \"Username must be 15 characters or less.\")\r\n        .required(\"Username is required.\"),\r\n    // Password required and length between 8 and 15 chars.\r\n    password: Yup.string()\r\n        .min(8, \"Password must be at least 8 characters.\")\r\n        .max(15, \"Password must be 15 characters or less.\")\r\n        .required(\"Password is required.\"),\r\n    // Password and password_again must match.\r\n    password_again: Yup.string()\r\n        .oneOf([Yup.ref(\"password\"), null], \"Passwords must match.\")\r\n        .required(\"Password confirmation is required.\"),\r\n});\r\n\r\nconst SignUpForm = (): JSX.Element => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Mutation for adding a user.\r\n    const [addUser] = useMutation(ADD_USER);\r\n    // Rendering the form.\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                username: \"\",\r\n                password: \"\",\r\n                password_again: \"\",\r\n            }}\r\n            validationSchema={ValidationSchema}\r\n            onSubmit={(values) => {\r\n                // After submit there is a confirmation popup.\r\n                confirmAlert({\r\n                    title: \"Confirmation\",\r\n                    message: `Create an account with the name ${values.username}?`,\r\n                    buttons: [\r\n                        {\r\n                            label: \"Yes\",\r\n                            onClick: async () => {\r\n                                // On \"Yes\" the user is added to the database or \r\n                                // an error message is shown if error.\r\n                                try {\r\n                                    await addUser({\r\n                                        variables: {\r\n                                            username: values.username,\r\n                                            password: values.password,\r\n                                        },\r\n                                    });\r\n                                    notification(\r\n                                        \"Success.\",\r\n                                        `You created an account with the name ${values.username}.`,\r\n                                        \"success\"\r\n                                    );\r\n                                } catch (e: unknown) {\r\n                                    notification(\r\n                                        \"Error.\",\r\n                                        (e as Error).message || \"Something went wrong.\",\r\n                                        \"danger\"\r\n                                    );\r\n                                    // If words password or username are in the error message,\r\n                                    // they will be set as empty strings again to speed up the sign up process.\r\n                                    if ((e as Error).message.includes(\"password\")) {\r\n                                        values.password = \"\";\r\n                                    } else if ((e as Error).message.includes(\"username\")) {\r\n                                        values.username = \"\";\r\n                                    }\r\n                                }\r\n                            },\r\n                        },\r\n                        {\r\n                            label: \"No\",\r\n                            onClick: () => {\r\n                                // On \"No\" => notification.\r\n                                notification(\r\n                                    \"Canceled\",\r\n                                    \"You didn't create a new account.\",\r\n                                    \"info\"\r\n                                );\r\n                            },\r\n                        },\r\n                    ],\r\n                });\r\n            }}\r\n        >\r\n            {({\r\n                values,\r\n                handleChange,\r\n                handleSubmit,\r\n                errors,\r\n                touched,\r\n                handleBlur,\r\n            }): JSX.Element => (\r\n                <form onSubmit={handleSubmit}>\r\n                    <CssTextField\r\n                        id=\"usernameSignUp\"\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        type=\"text\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        value={values.username}\r\n                        onBlur={handleBlur}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <AccountCircle />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {errors.username && touched.username \r\n                    // An error text will be shown if the username is invalid and touched.\r\n                        ? \r\n                        (\r\n                            <div className={styles.errorColor}>{errors.username}</div>\r\n                        ) \r\n                        : null}\r\n                    <p></p>\r\n                    <CssTextField\r\n                        id=\"passwordSignUp\"\r\n                        label=\"Password\"\r\n                        name=\"password\"\r\n                        type=\"password\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        value={values.password}\r\n                        onBlur={handleBlur}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LockRounded />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {errors.password && touched.password \r\n                        ? \r\n                        (\r\n                            <div className={styles.errorColor}>{errors.password}</div>\r\n                        ) \r\n                        : null\r\n                    }\r\n                    <p></p>\r\n                    <CssTextField\r\n                        id=\"password_again\"\r\n                        label=\"Password again\"\r\n                        name=\"password_again\"\r\n                        type=\"password\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        value={values.password_again}\r\n                        onBlur={handleBlur}\r\n                        InputProps={{\r\n                            startAdornment: (\r\n                                <InputAdornment position=\"start\">\r\n                                    <LockRounded />\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {errors.password_again && touched.password_again\r\n                        ? <div className={styles.errorColor}>{errors.password_again}</div>\r\n                        : null\r\n                    }\r\n                    <p></p>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={styles.loginButton}\r\n                        id=\"signUpButton\"\r\n                    >\r\n                        Sign up\r\n                    </Button>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    );\r\n};\r\n\r\nexport default SignUpForm;\r\n","import React from \"react\";\r\nimport { Divider, Typography } from \"@material-ui/core\";\r\nimport LoginForm from \"./LoginForm\";\r\nimport SignUpForm from \"./SignUpForm\";\r\nimport useStyles from \"./loginRouteStyles.module\";\r\n\r\n// This component takes generally care of the login page.\r\n\r\nconst LoginPage = (): JSX.Element => {\r\n    const styles = useStyles();\r\n    return (\r\n        <div className={styles.loginPageFirstDiv}>\r\n            <div>\r\n                <div className={styles.loginPageDivs}>\r\n                    <Typography variant=\"h5\">Log in</Typography>\r\n                </div>\r\n                <p></p>\r\n                <div className={styles.loginPageDivs}>\r\n                    <LoginForm />\r\n                </div>\r\n                <p></p>\r\n                <div className={styles.loginPageDivs}>\r\n                    <p></p>\r\n                    <Divider className={styles.loginDivider} />\r\n                </div>\r\n                <div className={styles.loginPageDivs}>\r\n                    <Typography variant=\"h5\">Sign up</Typography>\r\n                </div>\r\n                <p></p>\r\n                <div className={styles.loginPageDivs}>\r\n                    <SignUpForm />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n","// BuyingStockReducer and its actions creators.\r\nconst buyingStockReducer = (\r\n    state = { stockName: \"\", stockPrice: 0.0 },\r\n    action: { type: string; stock: string; price: number }\r\n): { stockName: string; stockPrice: number } => {\r\n    switch (action.type) {\r\n    case \"CHANGE_STOCK\":\r\n        return { ...state, stockName: action.stock };\r\n    case \"CHANGE_PRICE\":\r\n        return { ...state, stockPrice: action.price };\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport const changeStock = (\r\n    stock: string\r\n): { type: string; stock: string; price: number } => {\r\n    return {\r\n        type: \"CHANGE_STOCK\",\r\n        stock: stock,\r\n        price: 0.0,\r\n    };\r\n};\r\n\r\nexport const changePrice = (\r\n    price: number\r\n): { type: string; stock: string; price: number } => {\r\n    return {\r\n        type: \"CHANGE_PRICE\",\r\n        stock: \"moikka\",\r\n        price: price,\r\n    };\r\n};\r\n\r\nexport default buyingStockReducer;\r\n","import React from \"react\";\r\nimport ReactLoading, { LoadingType } from \"react-loading\";\r\n\r\n// This component is responsible for displaying the loading animation (react-loading-library).\r\n\r\nconst LoadingAnimation = ({ type, color }: {type: string, color: string}): JSX.Element => {\r\n    return (\r\n        <ReactLoading\r\n            type={type as LoadingType}\r\n            color={color}\r\n            height={\"10%\"}\r\n            width={\"10%\"}\r\n        />\r\n    );\r\n};\r\n\r\nexport default LoadingAnimation;\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    finalInformationTypography: {\r\n        paddingTop: 5,\r\n        paddingBottom: 5,\r\n    },\r\n    animationLastTypography: {\r\n        fontSize: 15,\r\n        paddingTop: 4\r\n    },\r\n    errorColor: {\r\n        color: \"red\"\r\n    },\r\n    loadingAnimationDiv: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: 300\r\n    },\r\n    chartError: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"50vh\",\r\n        color: \"red\"\r\n    },\r\n    stockPageFirstDiv: {\r\n        backgroundColor: \"white\",\r\n        textAlign: \"center\",\r\n        paddingTop: \"20vh\",\r\n        paddingBottom: \"20vh\",\r\n        margin: 5\r\n    },\r\n    stockPageSecondDiv: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"flex-end\",\r\n    },\r\n    stockPageAnimationDiv: {\r\n        height: 0,\r\n        paddingBottom: 55,\r\n        paddingRight: \"10vw\"\r\n    },\r\n    stockPageAnimationTypography: {\r\n        width: 160,\r\n        fontSize: 15\r\n    },\r\n    buyStockFormButton: {\r\n        width: \"20vw\",\r\n        background: \"black\",\r\n        color: \"white\"\r\n    },\r\n    stockPageLastDiv: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"end\",\r\n        paddingRight: \"2\"\r\n    },\r\n    mainChartWidth: {width: \"96%\"},\r\n    mainChartDiv: {display: \"flex\", flexDirection: \"row\"},\r\n    buyStocksHigherDiv: {\r\n        paddingTop: 40,\r\n        width: \"20vw\",\r\n        paddingRight: 5\r\n    }\r\n});\r\n\r\nexport default useStyles;","import React from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { INDIVIDUAL_STOCK } from \"../../graphql/queries\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { changePrice } from \"../../reducers/buyingStockReducer\";\r\nimport { useEffect } from \"react\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport LoadingAnimation from \"../Other/LoadingAnimation\";\r\nimport leadingZeros, { finalMyDateOption, options } from \"../../utils/helpers\";\r\nimport useStyles from \"./buyStocksRouteStyles.module\";\r\nimport { parseCompany } from \"../../tsUtils/typeGuards\";\r\n\r\n// This component returns chart that is shown to the user before purchasing a stock.\r\nconst MainChart = (props: { stock: string }): JSX.Element => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Parsing the stock name.\r\n    const parsedStock = parseCompany(props.stock);\r\n    // With useQuery we run individualStock-query from the backend. We give\r\n    // company name as a variable (it comes from BuyStocks-component's form).\r\n    const { data, loading, ...rest } = useQuery(INDIVIDUAL_STOCK, {\r\n        variables: { company: parsedStock },\r\n    });\r\n    // We use useDispatch's dispatch to dispatch actions to the Redux store.\r\n    const dispatch = useDispatch();\r\n    // Initializing stockList for the ApexChart-library's options.\r\n    let stockList: { close: number; date: string }[] = [];\r\n    // If the data has loaded, we reformat it.\r\n    if (data) {\r\n        stockList = data.individualStock.map((b: {__typename: string, close: number, date: string\r\n        }): { close: number; date: string } => {\r\n            return { close: b.close, date: b.date };\r\n        }\r\n        );\r\n    }\r\n    // Every time the data from individualStock-query changes, we change the price per stock with Redux.\r\n    useEffect(() => {\r\n        if (stockList && stockList[stockList.length - 1] !== undefined) {\r\n            dispatch(changePrice(stockList[stockList.length - 1].close));\r\n        }\r\n        if (stockList && stockList.length === 0) {\r\n            dispatch(changePrice(0));\r\n        }\r\n    }, [data]);\r\n\r\n    // Here we determine some options to be used in the chart, on top of the previously made options\r\n    // we have imported.\r\n    const finalOptions = {\r\n        ...options,\r\n        xaxis: {\r\n            // INsert values for x-axis.\r\n            categories: stockList.map((x: { close: number; date: string }) => x.date),\r\n            type: finalMyDateOption,\r\n            labels: {\r\n                formatter: function (value: string) {\r\n                    // Formatting the label for x-axis.\r\n                    const a = new Date(value);\r\n                    const xLabel = `${a.getDate()}.${a.getMonth()}, ${leadingZeros(\r\n                        a.getHours()\r\n                    )}:${leadingZeros(a.getMinutes())}`;\r\n                    return xLabel;\r\n                },\r\n            },\r\n        },\r\n    };\r\n    // These are the value for y-axis.\r\n    const series = [\r\n        {\r\n            name: props.stock.toUpperCase(),\r\n            data: stockList.map((y: { close: number; date: string }) =>\r\n                y.close.toFixed(2)\r\n            ) || [0],\r\n        },\r\n    ];\r\n    // Returning the chart and checking if there are errors.\r\n    return (\r\n        <div>\r\n            <Typography>Last 96 hours</Typography>\r\n            {loading \r\n                ? \r\n                (\r\n                    <div className={styles.loadingAnimationDiv}>\r\n                        <LoadingAnimation type={\"spin\"} color={\"black\"} />\r\n                    </div>\r\n                ) \r\n                : rest.error && rest.error.graphQLErrors[0].message !== \"Incorrect or missing symbol.\" \r\n                    ? \r\n                    (\r\n                        <div className={styles.chartError}>\r\n                            {rest.error.graphQLErrors[0].message}\r\n                        </div>\r\n                    ) \r\n                    : \r\n                    (\r\n                        <Chart options={finalOptions} series={series} type=\"line\" height={300} />\r\n                    )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainChart;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { Button, Typography } from \"@material-ui/core\";\r\nimport { BuyStocksTextField } from \"../../utils/helpers\";\r\nimport { InputAdornment } from \"@material-ui/core\";\r\nimport { Business, MonetizationOn, Add } from \"@material-ui/icons\";\r\nimport { changeStock } from \"../../reducers/buyingStockReducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../..\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { BUY_STOCK } from \"../../graphql/queries\";\r\nimport { HandleBlurType, HandleChangeType, BuyStockValuesType } from \"../../tsUtils/types\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport * as Yup from \"yup\";\r\nimport { buyFirstStock } from \"../../reducers/firstBuyReducer\";\r\nimport { AnimateKeyframes } from \"react-simple-animate\";\r\nimport notification from \"../../utils/notification\";\r\nimport useStyles from \"./buyStocksRouteStyles.module\";\r\nimport { parsePrice, parseAmount, parseCompany } from \"../../tsUtils/typeGuards\";\r\n\r\n// This is a component that is used to organize the purchase of stocks\r\n// and the Buy Stocks -page.\r\n\r\n\r\n\r\n// This component is to format the string that shows the total price of the purchase.\r\nconst FinalInformation = ({price, amount}: {price: number; amount: string;}): JSX.Element => {\r\n    // Parsing price and amount to numbers.\r\n    const parsedPrice = parsePrice(price);\r\n    const parsedAmount = parseAmount(amount);\r\n    // Initializing the string that will be returned.\r\n    let totalSum = \"Total: 0.00\";\r\n    // If the price and amount are not empty, the total sum is calculated\r\n    // and returned to the string. Otherwise, the string is returned with its\r\n    // default value.\r\n    if (parsedPrice !== 0 && parsedAmount !== \"0\" && parsedAmount !== \"\") {\r\n        totalSum = `Total: ${(parsedPrice * parseFloat(parsedAmount)).toFixed(2)}$`;\r\n    }\r\n    return (\r\n        <Typography className={\"finalInformationTypography\"}>\r\n            {totalSum}\r\n        </Typography>\r\n    );\r\n};\r\n// This component returns text field for the price per stock (automatically generated).\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst PricePerStock = ({ price, handleChange }: {\r\n    price: number;\r\n    handleChange: HandleChangeType;\r\n}): JSX.Element => {\r\n    // Returning the custom-made text field.\r\n    return (\r\n        <BuyStocksTextField\r\n            id=\"price_per_stock\"\r\n            type=\"price_per_stock\"\r\n            variant=\"outlined\"\r\n            label=\"Price per stock\"\r\n            onChange={handleChange}\r\n            value={price}\r\n            InputProps={{\r\n                startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                        <MonetizationOn />\r\n                    </InputAdornment>\r\n                ),\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\n// This component returns text field for the company name.\r\nconst Company = ({\r\n    companyName,\r\n    handleChange,\r\n    setIsDisabled,\r\n    currentName,\r\n    handleBlur,\r\n}: {\r\n  handleChange: HandleChangeType\r\n  companyName: string;\r\n  setIsDisabled: (boo: boolean) => void;\r\n  currentName: string;\r\n  handleBlur: HandleBlurType;\r\n}): JSX.Element => {\r\n    // Initializing a state for the company name and parsing company.\r\n    const parsedCompany = parseCompany(companyName);\r\n    const [name, setName] = useState(parsedCompany);\r\n    // Creating a new Dispatch-object.\r\n    const dispatch = useDispatch();\r\n    // We use the debounce-function to make sure that the company name is not\r\n    // sent to the server every time the user types a letter. We only send it\r\n    // when the user has stopped typing for a 1,5 seconds.\r\n    const [debounceName] = useDebounce(name, 1500);\r\n    // In this useEffect, we check if the company name is not empty and if it\r\n    // is not empty, we update the previously created name-state. And after that\r\n    // if the currentName doesn't update for 1,5 seconds, debounceName changes its value\r\n    // to the name, whose value is originally currentName's value.\r\n    useEffect(() => {\r\n        if (currentName === \"\") {\r\n            setName(\"\");\r\n        }\r\n    }, [currentName]);\r\n    // When the debounceName changes, we send its value to the server and enable the BUY-button.\r\n    useEffect(() => {\r\n        dispatch(changeStock(debounceName));\r\n        setIsDisabled(false);\r\n    }, [debounceName]);\r\n    // When the value of the company name changes, we update the name-state and use the \r\n    // handleChange in the top-component BuyStocks.\r\n    const onChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setIsDisabled(true);\r\n        \r\n        setName(event.target.value);\r\n        handleChange(event);\r\n    };\r\n    // Returning the custom-made text field.\r\n    return (\r\n        <div>\r\n            <BuyStocksTextField\r\n                id=\"company\"\r\n                autoComplete=\"off\"\r\n                type=\"company\"\r\n                onBlur={handleBlur}\r\n                variant=\"outlined\"\r\n                name=\"company\"\r\n                label=\"Company\"\r\n                onChange={onChange}\r\n                value={name}\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <Business />\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n// This is the validation schema (made with yup) for our form.\r\nconst ValidationSchema = Yup.object().shape({\r\n    // Company's name is required.\r\n    company: Yup.string()\r\n        .required(\"Required field.\"),\r\n    // Amount is required and must be a positive integer.\r\n    amount: Yup.number()\r\n        .required(\"Required field.\")\r\n        .transform((value: string) => parseInt(value))\r\n        .integer(\"Must be a positive integer.\")\r\n        .min(1, \"Amount must be at least one.\"),\r\n});\r\n// This component returns the whole form. We use Redux here a lot because our form must\r\n// cooperates with MainChart-component and we need a more global state. We use Formik as well.\r\nconst BuyStocks = (): JSX.Element => {\r\n    const styles = useStyles();\r\n    // Redux-state for the price.\r\n    const price = useSelector<RootState, number>(\r\n        (state) => state.stock.stockPrice\r\n    );\r\n    // Redux-state for the company name.\r\n    const currentName = useSelector<RootState, string>(\r\n        (state) => state.stock.stockName\r\n    );\r\n    // Initial values for the Formik-form.\r\n    const initialValues: BuyStockValuesType = {\r\n        company: \"\",\r\n        amount: \"1\",\r\n        price_per_stock: \"\",\r\n    };\r\n    // Used useMutation-hook for the buyStock-mutation and its results.\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    const [buyStock, { data, loading, error }] = useMutation(BUY_STOCK);\r\n    // Disabled/enabled-state for the BUY-button.\r\n    const [isDisabled, setIsDisabled] = useState(false);\r\n    // Dispatch-object for Redux.\r\n    const dispatch = useDispatch();\r\n    // Redux-state to check whether this is the first purchase of this user (do we show animations?).\r\n    const purchase = useSelector<RootState, boolean>(\r\n        (state): boolean => state.purchase\r\n    );\r\n    // Returning the whole form.\r\n    return (\r\n        <div>\r\n            <Formik\r\n                // Giving initialValues and ValidationSchema to Formik-component.\r\n                initialValues={initialValues}\r\n                validationSchema={ValidationSchema}\r\n                onSubmit={(values) => {\r\n                    // After submit, we show a confirmation popup.\r\n                    confirmAlert({\r\n                        title: \"Confirmation\",\r\n                        message: `Are you sure you want to purchase ${\r\n                            values.amount\r\n                        } x ${currentName.toUpperCase()} (${(\r\n                            price * parseInt(values.amount)\r\n                        ).toFixed(2)}$)?`,\r\n                        buttons: [\r\n                            {\r\n                                label: \"Yes\",\r\n                                onClick: async () => {\r\n                                    // When the user clicks on \"Yes\", we send the data to the server.\r\n                                    // If this doesn't work, we show an error-popup.\r\n                                    try {\r\n                                        await buyStock({\r\n                                            variables: {\r\n                                                stockName: currentName.toUpperCase(),\r\n                                                amount: parseInt(values.amount),\r\n                                            },\r\n                                        });\r\n                                        dispatch(changeStock(\"\"));\r\n                                        dispatch(buyFirstStock());\r\n                                        notification(\r\n                                            \"Success\",\r\n                                            `You purchased: ${\r\n                                                values.amount\r\n                                            } x ${currentName.toUpperCase()}.`,\r\n                                            \"success\"\r\n                                        );\r\n                                    } catch (e: unknown) {\r\n                                        notification(\r\n                                            \"Error\",\r\n                                            (e as Error).message || \"Something went wrong.\",\r\n                                            \"danger\"\r\n                                        );\r\n                                    }\r\n                                },\r\n                            },\r\n                            {\r\n                                label: \"No\",\r\n                                onClick: () => {\r\n                                    // When the user clicks on \"No\", we show a notification.\r\n                                    notification(\r\n                                        \"Canceled\",\r\n                                        \"The purchase was canceled.\",\r\n                                        \"info\"\r\n                                    );\r\n                                },\r\n                            },\r\n                        ],\r\n                    });\r\n                }}\r\n            >\r\n                {({ handleSubmit, values, handleChange, errors, touched, handleBlur,}) => (\r\n                    // Form and its error texts. If this is the first purchase, we show custom-made\r\n                    // animations. Error text are only shown, if yup detects and the field\r\n                    // is touched. MUI-Buttons' styles were difficult to overide so I used\r\n                    // inline-styles.\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Company\r\n                            handleChange={handleChange}\r\n                            handleBlur={handleBlur}\r\n                            setIsDisabled={(val: boolean) => setIsDisabled(val)}\r\n                            companyName={values.company}\r\n                            currentName={currentName}\r\n                        />\r\n                        {errors.company && touched.company ? (\r\n                            <div className={styles.errorColor}>{errors.company}</div>\r\n                        ) : null}\r\n                        <p></p>\r\n                        <BuyStocksTextField\r\n                            id=\"amount\"\r\n                            type=\"number\"\r\n                            variant=\"outlined\"\r\n                            label=\"Amount\"\r\n                            onChange={handleChange}\r\n                            value={values.amount}\r\n                            onBlur={handleBlur}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Add />\r\n                                    </InputAdornment>\r\n                                ),\r\n                                inputProps: { min: 0 },\r\n                            }}\r\n                        />\r\n                        {errors.amount && touched.amount ? (\r\n                            <div className={\"errorColor\"}>{errors.amount}</div>\r\n                        ) : null}\r\n                        <p></p>\r\n                        <PricePerStock price={price} handleChange={handleChange} />\r\n                        <FinalInformation price={price} amount={values.amount} />\r\n                        {!purchase && currentName ? (\r\n                            <div>\r\n                                <AnimateKeyframes\r\n                                    play\r\n                                    iterationCount=\"infinite\"\r\n                                    keyframes={[\"opacity: 0\", \"opacity: 1\"]}\r\n                                    duration={3}\r\n                                >\r\n                                    <Button\r\n                                        disabled={isDisabled}\r\n                                        variant=\"contained\"\r\n                                        type=\"submit\"\r\n                                        className={styles.buyStockFormButton}\r\n                                    >\r\n                                        Buy\r\n                                    </Button>\r\n                                    <Typography className={\"animationLastTypography\"}>\r\n                                        {\"Press buy and confirm.\"}\r\n                                    </Typography>\r\n                                </AnimateKeyframes>\r\n                            </div>\r\n                        ) : (\r\n                            <Button\r\n                                disabled={isDisabled}\r\n                                id=\"buyStockButton\"\r\n                                variant=\"contained\"\r\n                                type=\"submit\"\r\n                                className={styles.buyStockFormButton}\r\n                            >\r\n                                Buy\r\n                            </Button>\r\n                        )}\r\n                        <p></p>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BuyStocks;\r\n","import React from \"react\";\r\nimport MainChart from \"./MainChart\";\r\nimport BuyStocks from \"./BuyStocks\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../..\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { AnimateKeyframes } from \"react-simple-animate\";\r\nimport { ArrowDownRight } from \"react-bootstrap-icons\";\r\nimport useStyles from \"./buyStocksRouteStyles.module\";\r\n\r\nconst StockPage = (): JSX.Element => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Getting the current company name from the Redux store.\r\n    const currentName = useSelector<RootState, string>(\r\n        (state) => state.stock.stockName\r\n    );\r\n    // For the occasion that this is the first buy.\r\n    const purchase = useSelector<RootState, boolean>(\r\n        (state): boolean => state.purchase\r\n    );\r\n    // Returns the Stock Page.\r\n    return (\r\n        <div className={styles.stockPageFirstDiv}>\r\n            <div className={styles.stockPageSecondDiv}>\r\n                {!purchase && !currentName ? (\r\n                    <div className={styles.stockPageAnimationDiv}>\r\n                        <AnimateKeyframes\r\n                            play\r\n                            iterationCount=\"infinite\"\r\n                            keyframes={[\"opacity: 0\", \"opacity: 1\"]}\r\n                            duration={3}\r\n                        >\r\n                            <Typography className={styles.stockPageAnimationTypography}>\r\n                                {\"Write here the symbol & select an amount.\"}\r\n                            </Typography>\r\n                            <ArrowDownRight size={40} />\r\n                        </AnimateKeyframes>\r\n                    </div>\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </div>\r\n            <div className={styles.mainChartDiv}>\r\n                <div className={styles.mainChartWidth}>\r\n                    <MainChart stock={currentName} />\r\n                </div>\r\n                <div className={styles.buyStocksHigherDiv}>\r\n                    <BuyStocks />\r\n                </div>\r\n            </div>\r\n            <div className={styles.stockPageLastDiv}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default StockPage;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    ListItem,\r\n    List,\r\n    Divider,\r\n    ListItemText,\r\n    Drawer,\r\n} from \"@material-ui/core\";\r\nimport { actionEnableSidebar } from \"../../reducers/sidebarReducer\";\r\nimport { RootState } from \"../..\";\r\nimport {\r\n    AccountCircle,\r\n    Explore,\r\n    NotificationsNone,\r\n    ShowChart,\r\n} from \"@material-ui/icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AnimateKeyframes } from \"react-simple-animate\";\r\nimport useStyles from \"./otherComponentsStyles.module\";\r\n\r\n// This component is responsible for rendering the sidebar.\r\n\r\nconst SideBar = (): JSX.Element => {\r\n    // Initiating dispath with useDispatch-hook.\r\n    const dispatch = useDispatch();\r\n    // Getting the sidebar's state from the Redux-store.\r\n    const sidebarState = useSelector<RootState, boolean>(\r\n        (state): boolean => state.sidebar\r\n    );\r\n    // Importing styles \r\n    const styles = useStyles();\r\n    // History is for pushing the user to another page.\r\n    const history = useHistory();\r\n    // Getting the purchase state (if the user has no stocks in their portfolio, an animation is displayed in the sidebar as well).\r\n    const purchaseState = useSelector<RootState, boolean>(\r\n        (state): boolean => state.purchase\r\n    );\r\n    // Rendering the side bar.\r\n    return (\r\n        <div>\r\n            <Drawer\r\n                anchor=\"left\"\r\n                open={sidebarState}\r\n                onClose={() => {\r\n                    dispatch(actionEnableSidebar(\"DISABLE\"));\r\n                }}\r\n                classes={{ paper: styles.paper }}\r\n            >\r\n                <div>\r\n                    <List>\r\n                        <ListItem id=\"toMyProfile\" button onClick={() => history.push(\"/myprofile\")}>\r\n                            <AccountCircle />\r\n                            <ListItemText inset={true} primary={\"My profile\"} />\r\n                        </ListItem>\r\n                        <Divider classes={{ root: styles.divider }} />\r\n                        <ListItem\r\n                            button\r\n                            onClick={() => {history.push(\"/actions\");}}\r\n                        >\r\n                            <NotificationsNone />\r\n                            <ListItemText inset={true} primary={\"Actions\"} />\r\n                        </ListItem>\r\n                        <Divider classes={{ root: styles.divider }} />\r\n                        <ListItem id=\"toBuyStocks\" button onClick={() => history.push(\"/buystocks\")}>\r\n                            {!purchaseState ? (\r\n                                <>\r\n                                    <AnimateKeyframes\r\n                                        play\r\n                                        iterationCount=\"infinite\"\r\n                                        keyframes={[\"opacity: 0\", \"opacity: 1\"]}\r\n                                        duration={3}\r\n                                    >\r\n                                        <ShowChart style={{ paddingTop: 3 }} />\r\n                                    </AnimateKeyframes>\r\n                                    <AnimateKeyframes\r\n                                        play\r\n                                        iterationCount=\"infinite\"\r\n                                        keyframes={[\"opacity: 0\", \"opacity: 1\"]}\r\n                                        duration={3}\r\n                                    >\r\n                                        <ListItemText inset primary={\"Buy stocks\"} />\r\n                                    </AnimateKeyframes>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <ShowChart style={{ paddingTop: 3 }} />\r\n                                    <ListItemText inset primary={\"Buy stocks\"} />\r\n                                </>\r\n                            )}\r\n                        </ListItem>\r\n                        <Divider classes={{ root: styles.divider }} />\r\n                        <ListItem id=\"toExplore\" button onClick={() => history.push(\"/explore\")}>\r\n                            <Explore />\r\n                            <ListItemText inset={true} primary={\"Explore\"} />\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SideBar;\r\n","// ModeSwitchRedcuer and its action creator.\r\nconst modeSwitchReducer = (\r\n    state = { mode: false },\r\n    action: { type: string }\r\n): { mode: boolean } => {\r\n    switch (action.type) {\r\n    case \"CHANGE_MODE\":\r\n        return { mode: !state.mode };\r\n    default:\r\n        return state;\r\n    }\r\n};\r\n\r\nexport const changeMode = () => {\r\n    return {\r\n        type: \"CHANGE_MODE\",\r\n    };\r\n};\r\n\r\nexport default modeSwitchReducer;\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    chartLoadingAnimation: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        paddingTop: \"15px\",\r\n    },\r\n    tableCellTitles: {\r\n        color: \"white\"\r\n    },\r\n    oldDataButton: {\r\n        background: \"black\", \r\n        color: \"white\", \r\n        width: 150 \r\n    },\r\n    analysisTableButton: {\r\n        background: \"black\", color: \"white\"\r\n    },\r\n    myProfileLoadingAnimation: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\"\r\n    },\r\n    myProfileMainDiv: {\r\n        background: \"white\",\r\n        paddingBottom: \"60vh\",\r\n        paddingTop: \"10vh\",\r\n        margin: \"5\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    myProfileCardTitle: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    myProfileCardInfos: {\r\n        fontSize: 15, \r\n        flex: 1, \r\n        textAlign: \"center\" \r\n    },\r\n    myProfileCardContentDiv: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    myProfileCardContentTypography: {\r\n        fontWeight: \"bold\",\r\n        fontSize: 30,\r\n        textAlign: \"center\",\r\n    }, \r\n    myProfileCardContentNumberGreen: {\r\n        color: \"green\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 30,\r\n        textAlign: \"center\",\r\n    },\r\n    myProfileCardContentNumberRed: {\r\n        color: \"red\",\r\n        fontWeight: \"bold\",\r\n        fontSize: 30,\r\n        textAlign: \"center\",\r\n    },\r\n    myProfileButton: {\r\n        background: \"black\", color: \"white\"\r\n    },\r\n    modeTitles: {\r\n        fontWeight: \"bold\",\r\n        fontSize: 25,\r\n        color: \"black\",\r\n        textAlign: \"center\",\r\n        paddingTop: 10,\r\n        paddingBottom: 10\r\n    },\r\n    myProfileTransationList: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    myProfileAnalysisChartDiv: {\r\n        width: \"100%\", justifyContent: \"center\"\r\n    },\r\n    myProfileAnalysisSecondDIv: {\r\n        width: \"100%\", paddingLeft: \"5vh\", paddingRight: \"5vh\"\r\n    },\r\n    oldDataDiv: {\r\n        display: \"flex\",\r\n        paddingTop: \"5vh\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n    },\r\n    errorColor: {color: \"red\"},\r\n    transactionListDiv: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n    },\r\n    transactionList: {\r\n        display: \"flex\", \r\n        flexDirection: \"row\", \r\n        flexWrap: \"wrap\"\r\n    },\r\n    transactionListItem: {\r\n        width: \"50%\", \r\n        textAlign: \"center\"\r\n    },\r\n    black: {color: \"black\"},\r\n    transactionListCollapsedItem: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n    },\r\n    animationSizes: {\r\n        height: \"0px\",\r\n        width: \"0px\"\r\n    },\r\n    tutorialMainText: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\",\r\n        paddingLeft: \"2vh\",\r\n        paddingRight: \"2vh\",\r\n    },\r\n    tutorialArrow: {\r\n        paddingTop: 60, paddingLeft: 7\r\n    },\r\n    tutorialTypography: {\r\n        width: 200,\r\n        paddingLeft: 7\r\n    },\r\n});\r\n\r\nexport default useStyles;","import * as React from \"react\";\r\nimport { Table } from \"@material-ui/core\";\r\nimport { TableBody, Button } from \"@material-ui/core\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport { TableContainer } from \"@material-ui/core\";\r\nimport { TableHead } from \"@material-ui/core\";\r\nimport { TableRow } from \"@material-ui/core\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { AnalysisData, Holdings } from \"../../tsUtils/types\";\r\nimport { StyledTableRow } from \"../../utils/helpers\";\r\nimport useStyles from \"./myProfileRouteStyles.module\";\r\nimport notification from \"../../utils/notification\";\r\n\r\n// This component is responsible for rendering the analysis table under the chart.\r\n\r\nconst AnalysisTable = ({analysisData, holdings, getOldData}: \r\n    {getOldData: (comp: string) => void, analysisData: AnalysisData[], holdings: Holdings[]}) => {\r\n    const styles = useStyles();\r\n    // Immediatelly rendering.\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow style={{ background: \"black\" }}>\r\n                        <TableCell className={styles.tableCellTitles} align=\"right\">\r\n                            Company\r\n                        </TableCell>\r\n                        <TableCell className={styles.tableCellTitles} align=\"right\">\r\n                            Profit\r\n                        </TableCell>\r\n                        <TableCell className={styles.tableCellTitles} align=\"right\">\r\n                            Average purchase value\r\n                        </TableCell>\r\n                        <TableCell className={styles.tableCellTitles} align=\"right\">\r\n                            Current value\r\n                        </TableCell>\r\n                        <TableCell className={styles.tableCellTitles} align=\"right\">\r\n                            Total amount\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {analysisData.map((company: AnalysisData) => {\r\n                        // Here we map through analysisData, also sticks for every company.\r\n                        // First of all, we search for the company in holdings.\r\n                        const correspondingPosition = holdings.filter((x: Holdings) => {\r\n                            return x.usersStock.stockSymbol === company.name;\r\n                        })[0];\r\n                        let profitPercent = \"696969\";\r\n\r\n                        if (correspondingPosition) {\r\n                        // Here we calculate the profit percent of this particular company by taking its last value and dividing it by the original average value.\r\n                        // This only if the corresponding positions exists (subscriptions cause exceptions).\r\n                            profitPercent = \r\n                                ((-1 + company.sticks[company.sticks.length - 1].close / (correspondingPosition.usersTotalOriginalPriceValue / correspondingPosition.usersTotalAmount)) * 100).toFixed(2);\r\n                        }\r\n                        // Rendering is executed only if everything is all right. Subscriptions cause exceptions.\r\n                        if (company.name && correspondingPosition && profitPercent !== \"696969\") {\r\n                            return (\r\n                                <StyledTableRow key={`${company.name}`}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        <Button\r\n                                            id=\"openOldData\"\r\n                                            className={styles.analysisTableButton}\r\n                                            onClick={() => {\r\n                                                try {\r\n                                                    getOldData(company.name);\r\n                                                    return;\r\n                                                } catch (e: unknown) {\r\n                                                    notification(\"Error.\", (e as Error).message, \"danger\");\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            {company.name}\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                    {parseFloat(profitPercent) >= 0 ? (\r\n                                        <TableCell\r\n                                            style={{ color: \"green\" }}\r\n                                            align=\"right\"\r\n                                        >{`${parseFloat(profitPercent).toFixed(2)}%`}</TableCell>\r\n                                    ) : (\r\n                                        <TableCell\r\n                                            align=\"right\"\r\n                                            style={{ color: \"red\" }}\r\n                                        >{`${parseFloat(profitPercent).toFixed(2)}%`}</TableCell>\r\n                                    )}\r\n                                    <TableCell align=\"right\">\r\n                                        {(\r\n                                            correspondingPosition.usersTotalOriginalPriceValue / correspondingPosition.usersTotalAmount\r\n                                        ).toFixed(2)}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        {company.sticks[company.sticks.length - 1].close.toFixed(2)}\r\n                                    </TableCell>\r\n                                    <TableCell align=\"right\">\r\n                                        {correspondingPosition.usersTotalAmount}\r\n                                    </TableCell>\r\n                                </StyledTableRow>\r\n                            );\r\n                        } else {\r\n                            // We return empty table row is something has gone wrong.\r\n                            return <StyledTableRow key={company.name}></StyledTableRow>;\r\n                        }\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n};\r\n\r\nexport default AnalysisTable;\r\n","import React from \"react\";\r\nimport { Typography, Button } from \"@material-ui/core\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { OldDataType } from \"../../tsUtils/types\";\r\nimport { Formik } from \"formik\";\r\nimport { AnalysisData } from \"../../tsUtils/types\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { SELL_STOCK } from \"../../graphql/queries\";\r\nimport * as Yup from \"yup\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\r\nimport { CssTextField, options } from \"../../utils/helpers\";\r\nimport notification from \"../../utils/notification\";\r\nimport { ApolloError } from \"@apollo/client\";\r\nimport useStyles from \"./myProfileRouteStyles.module\";\r\n\r\n// This component is responsible for rendering the historical of a specific data when the user wants.\r\n\r\nconst OldData = ({\r\n    datas,\r\n    analysisData,\r\n    oldDataError\r\n}: {\r\n  datas: OldDataType;\r\n  analysisData: AnalysisData[];\r\n  oldDataError: (ApolloError | undefined)\r\n}) => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Initializing sell-mutation with useMutation-hook.\r\n    const [sell] = useMutation(SELL_STOCK);\r\n    // This is a variable that helps to detect a specific oldDataError and displaying a custom error notification.\r\n    const defaultAlphaError = \"https://www.alphavantage.co/premium/\";\r\n    \r\n    if (oldDataError) {\r\n        // If the error is Alpha Vantage's default error, we change it to a custom error for readability.\r\n        notification(\"API error.\", oldDataError.message.includes(defaultAlphaError) \r\n            ? \"An error with Alpha Vantage's API: too frequent requests or bad API key.\" \r\n            : oldDataError.message, \"danger\");\r\n        return <></>;\r\n    } \r\n    // If there is no data, we return an empty div.\r\n    if (!datas) return <div></div>;\r\n    // This formats data for x-axis. \r\n    const dates = datas.time_series.map((o: { date: string; value: number }) => o.date);\r\n    // We use different options than usual.\r\n    const oldDataDateOption = \"datetime\";\r\n    const readyDateOption: \"datetime\" | \"category\" | \"numeric\" | undefined =\r\n    oldDataDateOption as \"datetime\" | \"category\" | \"numeric\" | undefined;\r\n\r\n    const options2 = {\r\n        // We use default and self-made options that is imported.\r\n        ...options,\r\n        xaxis: {\r\n            categories: dates,\r\n            type: readyDateOption,\r\n            labels: {\r\n                rotate: 0,\r\n            },\r\n        },\r\n    };\r\n    // Y-values are collected from datas-prop.\r\n    const series = [\r\n        {\r\n            name: \"Value\",\r\n            data: datas.time_series.map((o: { date: string; value: number }) =>\r\n                o.value.toFixed(2)\r\n            ),\r\n        },\r\n    ];\r\n    // Validation schema for amount of stocks to sell.\r\n    const ValidationSchema = Yup.object().shape({\r\n        // Is required and must be at least one.\r\n        amount: Yup.number()\r\n            .required(\"Required field.\")\r\n            .transform((value: string) => parseInt(value))\r\n            .min(1, \"Amount must be at least one.\"),\r\n    });\r\n    // We search for the selected stock.\r\n    const selectedStock = analysisData.filter((o: AnalysisData): boolean => o.name === datas.metadata.symbol)[0];\r\n    // Does it exist?\r\n    if (!selectedStock) return <div></div>;\r\n    // Searching for the last price of the selected stock. This information is from analysisData so it is fresh information.\r\n    // We could make a new query to get the last price but it would be a waste of resources, although it would be more accurate.\r\n    const lastPrice = selectedStock.sticks[selectedStock.sticks.length - 1].close;\r\n    return (\r\n        <div className={styles.oldDataDiv}>\r\n            <Typography style={{ fontSize: 20, fontWeight: \"bold\" }}>\r\n                 Old data: {datas.metadata.symbol} (last refresh:{\" \" + datas.metadata.lastRefresh})\r\n            </Typography>\r\n            <div style={{ width: \"100%\" }}>\r\n                <Chart options={options2} series={series} type=\"line\" height={300} />\r\n            </div>\r\n            <Formik\r\n            // Formik that handles the sell-form.\r\n                initialValues={{\r\n                    amount: \"\",\r\n                }}\r\n                onSubmit={(input: { amount: string }) => {\r\n                    confirmAlert({\r\n                        // On submit we display a confirmation\r\n                        title: \"Confirmation\",\r\n                        message: `Are you sure you want to sell ${input.amount} x ${datas.metadata.symbol.toUpperCase()} \r\n                        (${(lastPrice * parseInt(input.amount)).toFixed(2)}$)?`,\r\n                        buttons: [\r\n                            {\r\n                                label: \"Yes\",\r\n                                onClick: async () => {\r\n                                    // On \"Yes\", we try to sell the stock by using mutation.\r\n                                    try {\r\n                                        await sell({\r\n                                            variables: {\r\n                                                stockName: selectedStock.name,\r\n                                                amount: parseInt(input.amount),\r\n                                                price: lastPrice,\r\n                                            },\r\n                                        });\r\n                                        notification(\r\n                                            \"Success.\",\r\n                                            `You sold: ${\r\n                                                input.amount\r\n                                            } x ${datas.metadata.symbol.toUpperCase()}.`,\r\n                                            \"success\"\r\n                                        );\r\n                                    } catch (e: unknown) {\r\n                                        notification(\r\n                                            \"An error occured\",\r\n                                            (e as Error).message || \"Something went wrong.\",\r\n                                            \"danger\"\r\n                                        );\r\n                                    }\r\n                                },\r\n                            },\r\n                            {\r\n                                label: \"No\",\r\n                                onClick: () => {\r\n                                    notification(\"Canceled\", \"The sale was canceled.\", \"info\");\r\n                                },\r\n                            },\r\n                        ],\r\n                    });\r\n                }}\r\n                validationSchema={ValidationSchema}\r\n            >\r\n                {({\r\n                    handleSubmit,\r\n                    handleBlur,\r\n                    values,\r\n                    handleChange,\r\n                    errors,\r\n                    touched,\r\n                }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <p></p>\r\n                        <CssTextField\r\n                            id=\"amount\"\r\n                            type=\"number\"\r\n                            variant=\"outlined\"\r\n                            label=\"Amount\"\r\n                            onChange={handleChange}\r\n                            value={values.amount}\r\n                            style={{ width: 150 }}\r\n                            onBlur={handleBlur}\r\n                            InputProps={{\r\n                                inputProps: { min: 0 },\r\n                            }}\r\n                        />\r\n                        {errors.amount && touched.amount\r\n                            ? <div className={styles.errorColor}>{errors.amount}</div>\r\n                            : <></>}\r\n                        <p></p>\r\n                        <Typography style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                            Sell {datas.metadata.symbol} for {lastPrice}$?\r\n                        </Typography>\r\n                        <p></p>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            type=\"submit\"\r\n                            className={styles.oldDataButton}\r\n                        >\r\n                            Sell\r\n                        </Button>\r\n                        <p style={{ fontSize: 20 }}></p>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OldData;\r\n","import { Typography, Switch } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport { AnalysisData, CandleStock, Holdings } from \"../../tsUtils/types\";\r\nimport { changeMode } from \"../../reducers/modeSwitchReducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../..\";\r\nimport AnalysisTable from \"./AnalysisTable\";\r\nimport OldData from \"./OldData\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { GET_OLD_DATA } from \"../../graphql/queries\";\r\nimport LoadingAnimation from \"../Other/LoadingAnimation\";\r\nimport leadingZeros, { finalMyDateOption, options } from \"../../utils/helpers\";\r\nimport useStyles from \"./myProfileRouteStyles.module\";\r\nimport notification from \"../../utils/notification\";\r\n\r\nconst AnalysisChart = ({\r\n    analysisData,\r\n    holdings,\r\n    totalOriginalValue,\r\n    isTogglable\r\n}: {\r\n  analysisData: AnalysisData[];\r\n  holdings: Holdings[];\r\n  totalOriginalValue: number;\r\n  isTogglable: boolean\r\n}) => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Dispatch with useDispatch-hook.\r\n    const dispatch = useDispatch();\r\n    // To get historical data.\r\n    const [getData, { ...res }] = useLazyQuery(GET_OLD_DATA);\r\n    // Mode for chart is either hours or days.\r\n    const chartMode = useSelector<RootState, { mode: boolean }>(\r\n        (state) => state.mode\r\n    );\r\n    // If analysisData, which we get from MyProfile-component, is empty, render loading animation.\r\n    if (analysisData.length < 1) {\r\n        return (\r\n            <div className={styles.chartLoadingAnimation}>\r\n                <LoadingAnimation type={\"spin\"} color={\"black\"} />\r\n            </div>\r\n        );\r\n    }\r\n    // Next, we have to count, which analysisData-stick, also one company and its data, has least\r\n    // sticks (Finnhub doesn't return same kind of data for every stock ==> AAPL may have)\r\n    // (100 sticks per day and NOK only 10). In the chart we show as much sticks as the \r\n    // company that has least sticks. \r\n    let leastSticks = 0;\r\n    let leastSticksStock = analysisData[0];\r\n    analysisData.forEach((oneStock: AnalysisData) => {\r\n        if (oneStock.sticks.length < leastSticks) {\r\n            leastSticksStock = oneStock;\r\n            leastSticks = leastSticksStock.sticks.length;\r\n        }\r\n    });\r\n    // Dates for x-axis.\r\n    const dates = leastSticksStock.sticks.map((x: CandleStock) => x.date);\r\n    // Initializing a list for y-axis' values.\r\n    let prices: number[] = [];\r\n    // We go through every date in dates list and get the price for that date.\r\n    dates.forEach((oneDate: string) => {\r\n        // Initializing sum-variable. We have to take every stock's one price for every date and sum them together. \r\n        let sum = 0;\r\n        // Loop inside a loop --> we go through analysisData for every date. This might not be the most efficient way.\r\n        analysisData.forEach((oneStock: AnalysisData) => {\r\n            // We go through every stick in the list of sticks for every stock.\r\n            // We get the price for that date, if it exists.\r\n            const valueToAdd = oneStock.sticks.filter((oneStick: CandleStock) => {\r\n                return oneStick.date === oneDate;\r\n            });\r\n            // If the stick exists, we add it to sum. Before that, we multiply it with the stock's weight in portfolio.\r\n            if (valueToAdd.length > 0) {\r\n                sum = sum + valueToAdd[0].close * holdings.filter((pos: Holdings) => pos.usersStock.stockSymbol === oneStock.name)[0]?.usersTotalAmount;\r\n            } else {\r\n                // If the stick doesn't exist, we add the stick with the closest date to the date we are looking for.\r\n                // This variable will be used to find the closest date.\r\n                let biggestDiff = 99999;\r\n                // We start our search from the first stick of this particular stock.\r\n                let stickToSum = oneStock.sticks[0];\r\n                oneStock.sticks.forEach((oneStick: CandleStock) => {\r\n                    // Difference between the date we are looking for and the current stick's date (in the lopp).\r\n                    const time = Math.abs(new Date(oneStick.date).getTime() - new Date(oneDate).getTime());\r\n                    // If the difference is smaller than the biggestDiff, we update the biggestDiff and stickToSum.\r\n                    if (time < biggestDiff) {\r\n                        biggestDiff = time;\r\n                        stickToSum = oneStick;\r\n                    }\r\n                });\r\n                // Now that we have the stick with the closest date, we add its close-value to the sum as previously should have been done.\r\n                sum = sum + stickToSum.close * holdings.filter((holding: Holdings) => holding.usersStock.stockSymbol === oneStock.name)[0]?.usersTotalAmount;\r\n            }\r\n        });\r\n        // At the end of every loop, we add the sum to the list of y-axis' values.\r\n        prices = prices.concat(\r\n            parseFloat((100 * (-1 + sum / totalOriginalValue)).toFixed(2))\r\n        );\r\n    });\r\n\r\n    const chartOptions = {\r\n        // Default and self-made options.\r\n        ...options,\r\n        xaxis: {\r\n            // X-values (dates).\r\n            categories: dates,\r\n            type: finalMyDateOption,\r\n            labels: {\r\n                formatter: function (value: string) {\r\n                    // Formatting the x-axis labels.\r\n                    const a = new Date(value);\r\n                    let xLabel: string;\r\n                    chartMode.mode === false\r\n                        ? (xLabel = `${a.getDate()}.${a.getMonth() + 1}, ${leadingZeros(a.getHours())}:${leadingZeros(a.getMinutes())}`)\r\n                        : (xLabel = `${a.getDate()}.${a.getMonth() + 1}`);\r\n                    return xLabel;\r\n                },\r\n            },\r\n        },\r\n        yaxis: {\r\n            labels: {\r\n                // Formatting the y-axis labels.\r\n                formatter: function (value: number) {\r\n                    return `${value.toFixed(2)}%`;\r\n                },\r\n            },\r\n        },\r\n    };\r\n    const series = [\r\n        // Y-axis values.\r\n        {\r\n            name: \"Portfolio value (%)\",\r\n            data: prices.map((x: number) => isNaN(x) ? 0 : x), // If the prices haven't been correctly loaded and calculated, we set them to 0 for a moment.\r\n        },\r\n    ];\r\n\r\n    // When the user clicks the button of a specific stock, we try to get the historical data of that stock. If not succesfull, error-message is shown.\r\n    const getOldData = (symbol: string) => {\r\n        try {\r\n            getData({ variables: { symbol } });\r\n            return;\r\n        } catch (e: unknown) {\r\n            notification(\"Error.\", (e as Error).message, \"danger\");\r\n            return;\r\n        }\r\n    };\r\n    // Rendering the chart.\r\n    return (\r\n        <div>\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\",\r\n                }}\r\n            >\r\n                <Typography>Last 96 hours</Typography>\r\n                <Switch\r\n                    color={\"default\"}\r\n                    checked={chartMode.mode}\r\n                    onChange={() => dispatch(changeMode())}\r\n                    disabled={isTogglable}\r\n                ></Switch> \r\n                <Typography>Daily since first transaction</Typography>\r\n            </div>\r\n            <Chart options={chartOptions} series={series} type=\"line\" height={300} />\r\n            <AnalysisTable\r\n                getOldData={getOldData}\r\n                analysisData={analysisData}\r\n                holdings={holdings}\r\n            />\r\n            <div style={{ width: \"100%\" }}>\r\n                {res.loading ? (\r\n                    <div className={styles.chartLoadingAnimation}>\r\n                        <LoadingAnimation type={\"spin\"} color={\"black\"} />\r\n                    </div>\r\n                ) : (\r\n                    <OldData\r\n                        datas={res.data?.stockHistory}\r\n                        analysisData={analysisData}\r\n                        oldDataError={res.error}\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnalysisChart;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    Collapse,\r\n    Button,\r\n    List,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { KeyboardArrowRight, ShoppingCart, Delete } from \"@material-ui/icons\";\r\nimport { ExpandLess, ExpandMore } from \"@material-ui/icons\";\r\nimport { TransactionType } from \"../../tsUtils/types\";\r\nimport leadingZeros from \"../../utils/helpers\";\r\nimport useStyles from \"./myProfileRouteStyles.module\";\r\n\r\n// This component is responsible for displaying the list of transactions, either in MyProfile or Actions.\r\n\r\nconst TransactionList = (props: {\r\n  transactions: TransactionType[],\r\n  // The transactionsWithOwner-prop is used in Actions.\r\n  transactionsWithOwner?: {transactions: TransactionType[], transactionOwner: string}[];\r\n}): JSX.Element => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Setting up transactions' states (are they expanded or not).\r\n    const transactionStates = props.transactions\r\n        .map((trans: TransactionType): string => trans._id.toString())\r\n        .reduce((a, v) => ({ ...a, [v]: false }), {});\r\n    // State for transactions' mode (expanded or not).\r\n    const [open, setOpen] = useState(transactionStates);\r\n    // When the user wants to expand a transaction, this function is called.\r\n    const handleClick = (id: string) => {\r\n        setOpen((prevState: Record<string, boolean>) => ({\r\n            ...prevState,\r\n            [id]: !prevState[id],\r\n        }));\r\n    };\r\n    // Returing the list.\r\n    return (\r\n        <div className={styles.transactionListDiv}>\r\n            <div>\r\n                <Typography className={styles.modeTitles}>\r\n                    {props.transactionsWithOwner ? \"Actions\" : \"Transactions\"}\r\n                </Typography>\r\n            </div>\r\n\r\n            <List\r\n                className={styles.transactionList}\r\n                component=\"nav\"\r\n                aria-labelledby=\"nested-list-subheader\"\r\n            >\r\n                {props.transactions.map((transaction: TransactionType, index: number) => {\r\n                    const date = new Date(transaction.transactionDate);\r\n                    // Formatting date for every displayed transaction to a more readable format.\r\n                    const dateFormat =\r\n                        date.getDate() +\r\n                        \".\" +\r\n                        (date.getMonth() + 1).toString() +\r\n                        \".\" +\r\n                        date.getFullYear() +\r\n                        \", \" +\r\n                        leadingZeros(date.getHours()) +\r\n                        \":\" +\r\n                        leadingZeros(date.getMinutes());\r\n                    return (\r\n                        <div\r\n                            key={transaction.transactionDate}\r\n                            className={styles.transactionListItem}\r\n                        >\r\n                            <Button id=\"openTransaction\" onClick={() => handleClick(transaction._id.toString())}>\r\n                                <ListItemIcon>\r\n                                    {transaction.transactionType === \"Buy\" // Which icon to display.\r\n                                        ? <ShoppingCart />\r\n                                        : <Delete />}\r\n                                </ListItemIcon>\r\n                                <ListItemText\r\n                                    primary={ // Different text if we are on MyProfile or Actions.\r\n                                        `${transaction.transactionStock.stockSymbol} \r\n                                        ${props.transactionsWithOwner ? \"(\" + props.transactionsWithOwner[index].transactionOwner + \")\" : \"\"}`\r\n                                    }\r\n                                />\r\n                                {(open as Record<string, boolean>)[transaction._id.toString()] \r\n                                    ? <ExpandLess />\r\n                                    : <ExpandMore />}\r\n                            </Button>\r\n                            <Collapse\r\n                                in={(open as Record<string, boolean>)[transaction._id.toString()]}\r\n                                timeout=\"auto\"\r\n                            >\r\n                                <List\r\n                                    component=\"div\"\r\n                                    disablePadding\r\n                                    className={styles.transactionListCollapsedItem}                              \r\n                                >\r\n                                    <Button disabled={true} style={{color: \"black\"}}>\r\n                                        <ListItemIcon>\r\n                                            <KeyboardArrowRight />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary={`Date: ${dateFormat}`} />\r\n                                    </Button>\r\n                                    <Button disabled={true} style={{color: \"black\"}}>\r\n                                        <ListItemIcon>\r\n                                            <KeyboardArrowRight />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText\r\n                                            primary={`Price per share: ${transaction.transactionStockPrice.toFixed(2)}`}\r\n                                        />\r\n                                    </Button>\r\n                                    <Button disabled={true} style={{color: \"black\"}}>\r\n                                        <ListItemIcon>\r\n                                            <KeyboardArrowRight />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText\r\n                                            primary={`Amount: ${transaction.transactionStockAmount}`}\r\n                                        />\r\n                                    </Button>\r\n                                </List>\r\n                            </Collapse>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </List>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TransactionList;\r\n","import React from \"react\";\r\nimport { AnimateKeyframes } from \"react-simple-animate\";\r\nimport { Arrow90degUp } from \"react-bootstrap-icons\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport useStyles from \"./myProfileRouteStyles.module\";\r\n\r\n// This component is responsible for rendering the tutorial animation for first purchase in the MyProfile-page.\r\n\r\nconst TutorialAnimation = () => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Render the animation. Animation is created with AnimateKeyframes of react-simple-animate-library.\r\n    return (\r\n        <div style={{ background: \"white\" }}>\r\n            <div className={styles.animationSizes}>\r\n                <AnimateKeyframes\r\n                    play\r\n                    iterationCount=\"infinite\"\r\n                    keyframes={[\"opacity: 0\", \"opacity: 1\"]}\r\n                    duration={3}\r\n                >\r\n                    <Arrow90degUp\r\n                        size={50}\r\n                        className={styles.tutorialArrow}\r\n                    />\r\n                    <Typography className={styles.tutorialTypography}>\r\n                        Open the sidebar!\r\n                    </Typography>\r\n                </AnimateKeyframes>\r\n            </div>\r\n            <div className={styles.tutorialMainText}>\r\n                <Typography>\r\n                    You have bought no stocks. Follow the instructions and glinting\r\n                    objects in order to buy one.\r\n                </Typography>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TutorialAnimation;","import React, { useState, useEffect } from \"react\";\r\nimport AnalysisChart from \"./AnalysisChart\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { CURRENT_PORTFOLIO_VALUE, ME } from \"../../graphql/queries\";\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Typography,\r\n    Button,\r\n} from \"@material-ui/core\";\r\nimport Avatar from \"boring-avatars\";\r\nimport TransactionList from \"./TransactionList\";\r\nimport { Holdings } from \"../../tsUtils/types\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../..\";\r\nimport LoadingAnimation from \"../Other/LoadingAnimation\";\r\nimport { buyFirstStock, noPurchases } from \"../../reducers/firstBuyReducer\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport notification from \"../../utils/notification\";\r\nimport TutorialAnimation from \"./TutorialAnimation\";\r\nimport useStyles from \"./myProfileRouteStyles.module\";\r\n\r\nconst MyProfile = ({stockSubscription, followSubscriptions}: {\r\n  stockSubscription: string | undefined,\r\n  followSubscriptions: string | undefined\r\n}): JSX.Element => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Executing me-query.\r\n    const meResult = useQuery(ME);\r\n    // Initializing dispatch with useDispatch-hook.\r\n    const dispatch = useDispatch();\r\n    // Executing currentPortfolioValue-query with the mode \"days\".\r\n    const daysData = useQuery(CURRENT_PORTFOLIO_VALUE, { \r\n        variables: { mode: \"days\" }\r\n    });\r\n    // Executing currentPortfolioValue-query with the mode \"hours\".\r\n    const hoursData = useQuery(CURRENT_PORTFOLIO_VALUE, {\r\n        variables: { mode: \"hours\" }\r\n    });\r\n    // Initializing mode-state with useState-hook.\r\n    const [mode, setMode] = useState(\"Analysis\");\r\n    // Getting the current mode from Redux-store.\r\n    const switchMode = useSelector<RootState, { mode: boolean }>(\r\n        (state) => state.mode\r\n    );\r\n    // This useEffect is executed every time we get a notification of relevant follow/unfollow or\r\n    // a new stock-purchase/sale from the server. It updates all the data in the page, so that the client doesn't have to reload the page\r\n    // to see the changes.\r\n    useEffect(() => {\r\n        if (stockSubscription || followSubscriptions) {\r\n            try {\r\n                meResult.refetch();\r\n                hoursData.refetch();\r\n                daysData.refetch();\r\n            } catch (e: unknown) {\r\n                notification(\"An error occured.\", \"Error while downloading updates and new information.\", \"danger\");\r\n            }\r\n        }\r\n    }, [stockSubscription, followSubscriptions]);\r\n    // Checking if the user has no stocks ==> show the tutorial if true.\r\n    if (\r\n        daysData.error?.message === \"This user has no transactions.\" || hoursData.error?.message === \"This user has no transactions.\"\r\n    ) {\r\n        dispatch(noPurchases());\r\n        return <TutorialAnimation />;\r\n    }\r\n    // Checking if the data has been fetched.\r\n    if (!meResult.data || !hoursData.data ||!meResult.data.me || !hoursData.data.currentPortfolioValue) {\r\n        return <div className={styles.myProfileLoadingAnimation}><LoadingAnimation type={\"spin\"} color={\"black\"} /></div>;\r\n    }\r\n    // Checking errors.\r\n    if (meResult.error || daysData.error || hoursData.error) {\r\n        const errorMessage = meResult.error?.message || daysData.error?.message || hoursData.error?.message;\r\n        notification(\"An error occured.\", errorMessage as string, \"danger\");\r\n        return <div className={styles.myProfileLoadingAnimation}><LoadingAnimation type={\"spin\"} color={\"black\"} /></div>;\r\n    }\r\n    // If relevant data is not yet fetched, show the loading animation. We don't include daysData here\r\n    // because we want to show the loading animation onlye while the hoursData is still loading. If we have to \r\n    // wait daysData as well, the waiting time would be too long. The user cannot access the daily data\r\n    // before it's fetched, because in another component we disable the switch for the time.\r\n    if (meResult.loading || hoursData.loading || !meResult.data || !hoursData.data) {\r\n        return (\r\n            <div className={styles.myProfileLoadingAnimation}>\r\n                <LoadingAnimation type={\"spin\"} color={\"black\"} />\r\n            </div>\r\n        );\r\n    } else if (\r\n        meResult.data.me.usersHoldings.length === 0 || meResult.data.me.usersTransactions.length === 0\r\n    ) {\r\n        dispatch(noPurchases());\r\n        return <TutorialAnimation />;\r\n    } else if (meResult.data.me.usersHoldings.length !== 0) {dispatch(buyFirstStock());}\r\n    // Setting the data to analysisData-variable based on the mode.\r\n    const analysisData = switchMode.mode\r\n        ? daysData.data.currentPortfolioValue[0]\r\n        : hoursData.data.currentPortfolioValue[0];\r\n    // Setting the transactions to a variable.\r\n    const transactions = meResult.data.me.usersTransactions;\r\n    // Calculating the value of the whole portfolio when individual stocks were bought with usersHoldings.\r\n    const totalOriginalValue = meResult.data.me.usersHoldings.reduce(\r\n        (acc: number, curr: Holdings\r\n        ) => {\r\n            return acc + curr.usersTotalOriginalPriceValue;\r\n        },\r\n        0\r\n    );\r\n    // Current profit percentage.\r\n    const currentProfitPercentage = (parseFloat((100 * (-1 + hoursData.data.currentPortfolioValue[0].wholeValue / totalOriginalValue)).toString())).toFixed(2);\r\n    // Rendering MyProfile.\r\n    return (\r\n        <div className={styles.myProfileMainDiv}>\r\n            <div style={{ padding: 15 }}>\r\n                <Card>\r\n                    <CardHeader\r\n                        avatar={\r\n                            <Avatar\r\n                                size={100}\r\n                                name={meResult.data.me.usersUsername}\r\n                                variant=\"marble\"\r\n                                colors={[\"#808080\", \"#FFFFFF\", \"#000000\"]}\r\n                            />\r\n                        }\r\n                        title={\r\n                            <div className={styles.myProfileCardTitle}>\r\n                                <Typography style={{ fontSize: 30, flex: 1 }}>\r\n                                    {meResult.data.me.usersUsername}\r\n                                </Typography>\r\n                                <div style={{ flex: 1}}>\r\n                                    <Typography className={styles.myProfileCardInfos}>\r\n                                        {meResult.data.me.followerCount || 0}\r\n                                    </Typography>\r\n                                    <Typography className={styles.myProfileCardInfos}>\r\n                                        Followers\r\n                                    </Typography>\r\n                                </div>\r\n                                <div style={{ flex: 1}}>\r\n                                    <Typography className={styles.myProfileCardInfos}>\r\n                                        {meResult.data.me.followingCount || 0}\r\n                                    </Typography>\r\n                                    <Typography className={styles.myProfileCardInfos}>\r\n                                        Following\r\n                                    </Typography>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    ></CardHeader>\r\n                    <CardContent>\r\n                        <div className={styles.myProfileCardContentDiv}>\r\n                            <div style={{ justifyContent: \"center\" }}>\r\n                                <Typography className={styles.myProfileCardContentTypography}>\r\n                                    {Math.round(hoursData.data.currentPortfolioValue[0].wholeValue)}\r\n                                </Typography>\r\n                                <Typography style={{ textAlign: \"center\" }}>\r\n                                    Current value\r\n                                </Typography>\r\n                            </div>\r\n                            <div>\r\n                                {parseFloat(currentProfitPercentage) >= 0  // The color of the text is based on the sign of the profit.\r\n                                    ?   <Typography className={styles.myProfileCardContentNumberGreen}>{currentProfitPercentage}%</Typography> \r\n                                    :   <Typography className={styles.myProfileCardContentNumberRed}>{currentProfitPercentage}%</Typography>}\r\n\r\n                                <Typography style={{ textAlign: \"center\" }}>\r\n                                    Profit percentage\r\n                                </Typography>\r\n                            </div>\r\n                            <div>\r\n                                <Typography className={styles.myProfileCardContentTypography}>\r\n                                    {Math.round(totalOriginalValue)}\r\n                                </Typography>\r\n                                <Typography style={{ textAlign: \"center\" }}>\r\n                                     Original value\r\n                                </Typography>\r\n                            </div>\r\n                            <div>\r\n                                {Math.round(meResult.data.me.moneyMade) >= 0 // The color of the text is based on the sign of the money made.\r\n                                    ?   <Typography className={styles.myProfileCardContentNumberGreen}>{Math.round(meResult.data.me.moneyMade)}</Typography>\r\n                                    :   <Typography className={styles.myProfileCardContentNumberRed}>{Math.round(meResult.data.me.moneyMade)}</Typography>}\r\n                                <Typography style={{ textAlign: \"center\" }}>Profit</Typography>\r\n                            </div>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                <div style={{ paddingBottom: \"1vh\", textAlign: \"center\" }}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        type=\"submit\"\r\n                        onClick={() => setMode(\"Analysis\")}\r\n                        className={styles.myProfileButton}\r\n                    >\r\n                        Analysis\r\n                    </Button>\r\n                </div>\r\n                <div style={{ paddingBottom: \"1vh\", textAlign: \"center\" }}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        id=\"toTransactions\"\r\n                        type=\"submit\"\r\n                        onClick={() => setMode(\"Transactions\")}\r\n                        className={styles.myProfileButton}\r\n                    >\r\n                        Transactions\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            {mode === \"Analysis\" ? (\r\n                <div>\r\n                    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                        <div className={styles.myProfileAnalysisSecondDIv}>\r\n                            <Typography className={styles.modeTitles}>\r\n                                Analysis\r\n                            </Typography>\r\n                            <div>\r\n                                <div className={styles.myProfileAnalysisChartDiv}>\r\n                                    <AnalysisChart\r\n                                        totalOriginalValue={totalOriginalValue}\r\n                                        analysisData={analysisData.analysisValues}\r\n                                        holdings={meResult.data.me.usersHoldings}\r\n                                        isTogglable={!daysData.data}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div className={styles.myProfileTransationList}>\r\n                    <TransactionList transactions={transactions} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyProfile;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../..\";\r\nimport useStyles from \"./otherComponentsStyles.module\";\r\n\r\n// This component renders the default page (\"/\").\r\n\r\nconst DefaultPage = () => {\r\n    // Getting the userState.\r\n    const styles = useStyles();\r\n    const userState = useSelector<RootState, string>((state) => state.user.username);\r\n    return (\r\n        <div className={styles.defaultPageDiv}>\r\n            <Typography className={styles.defaultPageTitle}>\r\n                {userState ? \"You are logged in.\" : \"You are not logged in.\"} \r\n            </Typography>\r\n            <Typography style={{display: \"flex\", justifyContent: \"center\", paddingLeft: \"20vw\", paddingRight: \"20vw\"}}>\r\n                Welcome to InvShare.\r\n            </Typography>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DefaultPage;\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    loadingAnimationDiv: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\"\r\n    },\r\n    specificExploreFirstDiv: {\r\n        background: \"white\",\r\n        paddingBottom: \"60vh\",\r\n        paddingTop: \"10vh\",\r\n        margin: 5,\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    specificExploreTypography: {\r\n        fontSize: 15, \r\n        flex: 1, \r\n        textAlign: \"center\" \r\n    },\r\n    cardTitleDiv: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        flexWrap: \"wrap\",\r\n    },\r\n    cardTypography: {flex: 1, fontSize: 20},\r\n    followAmountsDiv: {flex: 1, paddingTop: 15},\r\n    cardContentDiv: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-around\",\r\n    },\r\n    cardContentTypography: {\r\n        fontWeigt: \"bold\",\r\n        fontSize: 30,\r\n        textAlign: \"center\",\r\n    },\r\n    transactionListDiv: {\r\n        fontWeight: \"bold\",\r\n        fontSize: 30,\r\n        textAlign: \"center\",\r\n    },\r\n    followButton: {\r\n        background: \"black\",\r\n        color: \"white\"\r\n    },\r\n    autoComplete: {\r\n        width: \"60vw\", \r\n        paddingRight: \"1vw\", \r\n        justifyContent: \"center\", \r\n        alignItems: \"center\", \r\n        display: \"flex\"\r\n    },\r\n    searchField: {\r\n        border: \"2px solid black\", \r\n        borderRadius: 7, \r\n        padding: 20\r\n    },\r\n    exploreTitle: {\r\n        fontSize: 30,\r\n        paddingBottom: 10\r\n    },\r\n    explorePageFirstDiv: {\r\n        backgroundColor: \"white\",\r\n        textAlign: \"center\",\r\n        margin: 5,\r\n    },\r\n    explorePageSecondDiv: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\"\r\n    }\r\n});\r\n\r\nexport default useStyles;\r\n","import React, {useState, useEffect} from \"react\";\r\nimport { InputAdornment } from \"@material-ui/core\";\r\nimport { useDebounce } from \"use-debounce\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport Autocomplete, { AutocompleteRenderInputParams } from \"@material-ui/lab/Autocomplete\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { SEARCH_USER } from \"../../graphql/queries\";\r\nimport { HandleChangeType, HandleSubmitType } from \"../../tsUtils/types\";\r\nimport useStyles from \"./exploreRouteStyles.module\";\r\nimport { parseUsername } from \"../../tsUtils/typeGuards\";\r\n\r\n// This component takes care for the text field for searching users (and the queries)\r\nconst UserSearch = ({\r\n    username,\r\n    handleChange,\r\n    handleBlur,\r\n    setFinalUser,\r\n}: {\r\n  handleChange: HandleChangeType\r\n  username: string;\r\n  handleBlur: (e: React.FocusEvent<unknown>) => void;\r\n  setFinalUser: (s: string) => void;\r\n  handleSubmit: HandleSubmitType;\r\n}) => {\r\n    // Parsing the username.\r\n    const parsedUsername = parseUsername(username);\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Lazy query (it will be executed later when its searchUser-function is called) initialized.\r\n    const [searchUser, { ...searchResult }] = useLazyQuery(SEARCH_USER);\r\n    // We are using useDebounce to prevent the query from being executed too often.\r\n    const [debounceName] = useDebounce(parsedUsername, 750);\r\n    // Options for the Autocomplete-component. The options are the users that are returned from the lazy query.\r\n    // Only the usernames of search result objects are included in the options.\r\n    const [options, setOptions] = useState<string[]>(searchResult.data?.searchUser === undefined \r\n        ? [] \r\n        : searchResult.data?.searchUser.map((user: {usersUsername: string, __typename: string}) => user.usersUsername)\r\n    );\r\n    // This determines if the search results are shown or not (Autocomplete).\r\n    const [open, setOpen] = useState(false);\r\n    // This variable determines if the loading-circle is shown.\r\n    const loading = open && options.length !== 0;\r\n    // Every time the debounced username changes, the searchUser-function is called. This happens 750 milliseconds after the last change in the text field.\r\n    useEffect(() => {\r\n        if (debounceName !== \"\") {\r\n            searchUser({ variables: { username: debounceName } });\r\n        }\r\n    }, [debounceName]);\r\n    // When the search result query is ready and the data changes, we change the Autocomplete-options\r\n    // to the list of the query-results. If there are no results, we set the options to an empty array.\r\n    useEffect(() => {\r\n        if (searchResult.data?.searchUser !== undefined) {\r\n            setOptions(searchResult.data.searchUser.map((user: {usersUsername: string, __typename: string}) => user.usersUsername));\r\n        } else {\r\n            setOptions([]);\r\n        }\r\n    }, [searchResult.data]);\r\n    // On change.\r\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        handleChange(event);\r\n    };\r\n    // This useEffect is executed every time loading-variable changes.\r\n    useEffect(() => {\r\n        // A helping variable initialized.\r\n        let active = true;\r\n        // If the loading-variable is false, we do nothing.\r\n        if (!loading) {\r\n            return undefined;\r\n        }\r\n        // Otherwise, if the active is true, we set options to match the options-variable.\r\n        (() => {\r\n            if (active) {\r\n                setOptions([...options]);\r\n            }\r\n        })();\r\n        // At the end, active is set to false.\r\n        return () => {\r\n            active = false;\r\n        };\r\n    }, [loading]);\r\n    // Returning the search field and autocomplete.\r\n    return (\r\n        <Autocomplete\r\n            id=\"username\"\r\n            className={styles.autoComplete}\r\n            open={open}\r\n            onOpen={() => {\r\n                setOpen(true);\r\n            }}\r\n            onClose={() => {\r\n                setOpen(false);\r\n                setOptions([]);\r\n            }}\r\n            // Options label is the username.\r\n            getOptionLabel={(option) => option}\r\n            options={options}\r\n            // We want no popupIcon.\r\n            popupIcon={<div></div>}\r\n            loading={loading}\r\n            // Autohiglight the first option.\r\n            autoHighlight\r\n            onChange={(_event, newValue) => {setFinalUser(newValue as string);}}\r\n            // Autoselect the first option.\r\n            autoSelect\r\n            // If there are no options.\r\n            noOptionsText=\"No users found\"\r\n            // Text input component.\r\n            renderInput={(params: AutocompleteRenderInputParams) => (\r\n                <TextField\r\n                    {...params}\r\n                    id=\"username\"\r\n                    name=\"username\"\r\n                    onBlur={handleBlur}\r\n                    onChange={onChange}\r\n                    className={styles.searchField}\r\n                    value={parsedUsername}\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <Search />\r\n                            </InputAdornment>\r\n                        ),\r\n                        // Disabling the default underline.\r\n                        disableUnderline: true\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default UserSearch;","import React, { useEffect, useState } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { SEARCH_USER_FINAL } from \"../../graphql/queries\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport notification from \"../../utils/notification\";\r\nimport useStyles from \"./exploreRouteStyles.module\";\r\nimport UserSearch from \"./UserSearch\";\r\nimport { Typography } from \"@material-ui/core\";\r\n// This component takes generally care of the Explore-page. \r\nconst ExplorePage = () => {\r\n    // Importing the styles.\r\n    const styles = useStyles();\r\n    // State that will have the final user's username in the end.\r\n    const [finalUser, setFinalUser] = useState(\"\");\r\n    // We take only refetch-function from the searchUser-query's response.\r\n    const {refetch: refetchSearch} = useQuery(SEARCH_USER_FINAL, {variables: {username: finalUser}});\r\n    // History is used to redirect the user to the final user's profile.\r\n    const history = useHistory();\r\n    // When the user presses enter or chooses a user from the autocomplete-list, this function is called.\r\n    const handleFinalSearch = async () => {\r\n        const response = await refetchSearch();\r\n        return response;\r\n    };\r\n    // Every time the finalUser-state changes, we call the handleFinalSearch-function (with the help of useEffect)\r\n    // Finaluser-state change only when enter is pressed or a user is chosen from the autocomplete-list.\r\n    useEffect(() => {\r\n        if (finalUser !== \"\") {\r\n            handleFinalSearch()\r\n                .then((response) => {\r\n                    // We use exceptionally then-catch-structure to handle final search.\r\n                    // If the search is successfull and we find one user with the given username, we redirect the user to the \r\n                    // SpecificExplore-component's page.\r\n                    if (response.data.searchUser.length === 1) {\r\n                        history.push(`/explore/${response.data.searchUser[0].usersUsername}`);\r\n                    } else {\r\n                        notification(\"Something went wrong.\", \"Your search was not precise enough or no user was found.\", \"info\");\r\n                    }\r\n                });\r\n        }\r\n    }, [finalUser]);\r\n    // Rendering the page. Formik is used and the self-made UserSearch-component.\r\n    return (\r\n        <div className={styles.explorePageFirstDiv}>\r\n            <div className={styles.explorePageSecondDiv}>\r\n                <Typography className={styles.exploreTitle}>Explore</Typography>\r\n                <Formik\r\n                    initialValues={{ username: \"\" }}\r\n                    onSubmit={(value: { username: string }) => {\r\n                        setFinalUser(value.username);\r\n                    }}\r\n                >\r\n                    {({ values, handleChange, handleBlur, handleSubmit }) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                            <UserSearch\r\n                                handleChange={handleChange}\r\n                                handleBlur={handleBlur}\r\n                                username={values.username}\r\n                                handleSubmit={handleSubmit}\r\n                                setFinalUser={setFinalUser}\r\n                            />\r\n                        </form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExplorePage;\r\n","import { useMutation, useQuery } from \"@apollo/client\";\r\nimport React, {useEffect} from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { FOLLOW, SEARCH_USER_FINAL, UNFOLLOW } from \"../../graphql/queries\";\r\nimport { Card, CardHeader, Typography, CardContent, Button } from \"@material-ui/core\";\r\nimport Avatar from \"boring-avatars\";\r\nimport LoadingAnimation from \"../Other/LoadingAnimation\";\r\nimport notification from \"../../utils/notification\";\r\nimport TransactionList from \"../MyProfileRoute/TransactionList\";\r\nimport useStyles from \"./exploreRouteStyles.module\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../..\";\r\n\r\n// This component is used to display the user profile of the user that was searched for.\r\n// It is quite similar to MyProfile-page, but less information.\r\nconst SpecificExplore = ({followSubscriptions}: {followSubscriptions: string}): JSX.Element => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Getting the username from url.\r\n    const username: {id: string} = useParams();\r\n    // Searching for the user (this time the search returns much more information).\r\n    // We use searchUser-query to search for the user from the database.\r\n    const searchResponse = useQuery(SEARCH_USER_FINAL, {variables: {username: username.id}});\r\n    // This mutation is used to follow the user.\r\n    const [follow, ...followResult] = useMutation(FOLLOW, {variables: {username: username.id}});\r\n    // We get the current user from the local storage.\r\n    const loggedUser = useSelector<RootState, string>((state) => state.user.username);\r\n    // This mutation is used to unfollow the user.\r\n    const [unfollow, ...unfollowResult] = useMutation(UNFOLLOW, {variables: {username: username.id}});\r\n\r\n    // Everytime an unfollow or a follow is done, the client either is notified or not\r\n    // depending on the user that is logged in the client.\r\n    // If there is a notification, the page updates the amount of followers and followings.\r\n    // If refetch is not succesfull, an error message will be displayed.\r\n    useEffect(() => {\r\n        if (followSubscriptions) {\r\n            try {\r\n                searchResponse.refetch();\r\n            } catch {\r\n                notification(\"Error.\", \"Something went wrong while trying to update the page.\", \"danger\");\r\n            }    \r\n        }\r\n    }, [followSubscriptions]);\r\n\r\n    // If response is loading, a loading animation will be displayed.\r\n    if (searchResponse.loading) {\r\n        return (\r\n            <div className={styles.loadingAnimationDiv}>\r\n                <LoadingAnimation type={\"spin\"} color={\"black\"} />\r\n            </div>\r\n        );\r\n    }\r\n    // When follow button is clicked, the follow-mutation is called. A notification will be\r\n    // be displayed both when the mutation is successfull and when it fails.\r\n    const handleClick = async () => {\r\n        try {\r\n            await follow();\r\n            notification(\"Success\", `You followed ${username.id}.`, \"success\");\r\n        } catch {\r\n            notification(\"Error.\", followResult[0].error?.graphQLErrors[0].message as string || \"An error occured.\", \"danger\");\r\n        }\r\n    };\r\n    // When unfollow button is clicked, the unfollow-mutation is called. A notification will be\r\n    // be displayed both when the mutation is successfull and when it fails.\r\n    const handleClickUnfollow = async () => {\r\n        try {\r\n            await unfollow();\r\n            notification(\"Success\", `You unfollowed ${username.id}.`, \"success\");\r\n        } catch {\r\n            notification(\"Error.\", unfollowResult[0].error?.graphQLErrors[0].message as string || \"An error occured.\", \"danger\");\r\n        }\r\n    };\r\n    // This returns the user profile.\r\n    return (\r\n        <div className={styles.specificExploreFirstDiv}>\r\n            <div style={{ padding: 15 }}>\r\n                <Card>\r\n                    <CardHeader\r\n                        avatar={\r\n                            <Avatar\r\n                                size={100}\r\n                                name={searchResponse.data.searchUser[0].usersUsername}\r\n                                variant=\"marble\"\r\n                                colors={[\"#808080\", \"#FFFFFF\", \"#000000\"]}\r\n                            />\r\n                        }\r\n                        title={\r\n                            <div className={styles.cardTitleDiv}>\r\n                                <div style={{ flex: 2 }}>\r\n                                    <Typography className={styles.cardTypography}>\r\n                                        {searchResponse.data.searchUser[0].usersUsername}\r\n                                    </Typography>\r\n                                    <Typography className={styles.cardTypography}>\r\n                                        {searchResponse.data.searchUser[0].usersFollowers.filter((followType: {\r\n                                            user: {usersUsername: string, __typename: string},\r\n                                             __typename: string}) => followType.user.usersUsername === loggedUser)\r\n                                            .length > 0 \r\n                                            // Either follow- or unfollow-button is displayed depending on if the user has been followed or not.\r\n                                            // The previous filter check the situation.\r\n                                            ? <Button className={styles.followButton} onClick={handleClickUnfollow}>Unfollow</Button>\r\n                                            : <Button className={styles.followButton} onClick={handleClick}>Follow</Button>\r\n                                        }\r\n                                    </Typography>\r\n                                </div>\r\n                                <div className={styles.followAmountsDiv}>\r\n                                    <Typography className={styles.specificExploreTypography}>\r\n                                        {searchResponse.data.searchUser[0].followerCount || 0}\r\n                                    </Typography>\r\n                                    <Typography className={styles.specificExploreTypography}>\r\n                                        Followers\r\n                                    </Typography>\r\n                                </div>\r\n                                <div className={styles.followAmountsDiv}>\r\n                                    <Typography className={styles.specificExploreTypography}>\r\n                                        {searchResponse.data.searchUser[0].followingCount || 0}\r\n                                    </Typography>\r\n                                    <Typography className={styles.specificExploreTypography}>\r\n                                        Following\r\n                                    </Typography>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    ></CardHeader>\r\n                    <CardContent>\r\n                        <div className={styles.cardContentDiv}>\r\n                            <div style={{ justifyContent: \"center\" }}>\r\n                                <Typography className={styles.cardContentTypography}>\r\n                                    {(searchResponse.data.searchUser[0].moneyMade || 0).toFixed(2)}\r\n                                </Typography>\r\n                                <Typography style={{ textAlign: \"center\" }}>\r\n                                    Money made\r\n                                </Typography>\r\n                            </div>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n            <div className={styles.transactionListDiv}>\r\n                <TransactionList transactions={searchResponse.data.searchUser[0].usersTransactions || 0} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SpecificExplore;","import { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    noActionsTypography: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        paddingTop: \"50vh\"\r\n    },\r\n    noActionsDiv: {\r\n        background: \"white\",\r\n        paddingBottom: \"60vh\",\r\n        paddingTop: \"15vh\",\r\n        margin: 5\r\n    },\r\n    loadingAnimation: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        height: \"100vh\"\r\n    },\r\n    transactionListDiv: {\r\n        background: \"white\",\r\n        paddingBottom: \"60vh\",\r\n        paddingTop: \"15vh\",\r\n        margin: 5\r\n    }\r\n});\r\n\r\nexport default useStyles;","import { useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { GET_ACTIONS } from \"../../graphql/queries\"\r\n;\r\nimport { TransactionType } from \"../../tsUtils/types\";\r\nimport TransactionList from \"../MyProfileRoute/TransactionList\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport LoadingAnimation from \"../Other/LoadingAnimation\";\r\nimport useStyles from \"./actionsRouteStyles.module\";\r\n\r\n// This is a component that is used to display the actions of the users\r\n// that the current user follows. ActionsPage include at the moment only\r\n// transactions (purchases and sales), but it could include follows and unfollows\r\n// as well. \r\n\r\nconst ActionsPage = (): JSX.Element => {\r\n    // Importing styles.\r\n    const styles = useStyles();\r\n    // Query to backend that gets the transactions of the users that the current user follows.\r\n    const actionsResult = useQuery(GET_ACTIONS);\r\n    // If the query is loading, the user will see a loading screen in the middle of the screen.\r\n    if (actionsResult.loading) {\r\n        return (\r\n            <div className={styles.loadingAnimation}>\r\n                <LoadingAnimation type={\"spin\"} color={\"black\"} />\r\n            </div>\r\n        );\r\n    }\r\n    // We store the transactions from every actions-item that was returned from the backend.\r\n    const actions = actionsResult.data.getActions.map((item: {transaction: TransactionType, transactionOwner: string}) => item.transaction);\r\n    // If there are no transactions, a screen telling there are no\r\n    // transactions to show pops up.\r\n    if (actions.length === 0) {\r\n        return(\r\n            <div className={styles.noActionsDiv}>\r\n                <Typography className={styles.noActionsTypography}>\r\n                    No actions yet. Follow someone or tell the users you follow to buy and sell stocks.\r\n                </Typography>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // If everything is all right (there are transactions + they have been loaded):\r\n    return (\r\n        <div className={styles.transactionListDiv}>\r\n            <TransactionList transactions={actions} transactionsWithOwner={actionsResult.data.getActions} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActionsPage;","import React from \"react\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { RESET_DATABASE } from \"../../graphql/queries\";\r\n\r\n// This is for resetting test database.\r\nconst Reset = () => {\r\n    const [reset, {...result}] = useMutation(RESET_DATABASE);\r\n    const resetDb = async () => {\r\n        await reset();\r\n    };\r\n    resetDb();\r\n    if (!result.data) {\r\n        return <div>Resetting...</div>;\r\n    } else {\r\n        return <div>Reseted succesfully.</div>;\r\n    }\r\n};\r\n\r\nexport default Reset;","import React from \"react\";\r\n\r\nconst HealthCheck = (): JSX.Element => {\r\n    return <div>Up.</div>;\r\n};\r\n\r\nexport default HealthCheck;","import React from \"react\";\r\nimport AppBar from \"./components/Other/AppBar\";\r\nimport {BrowserRouter as Router, Switch, Route, Redirect} from \"react-router-dom\";\r\nimport LoginPage from \"./components/LoginRoute/LoginPage\";\r\nimport StockPage from \"./components/BuyStocksRoute/StockPage\";\r\nimport SideBar from \"./components/Other/SideBar\";\r\nimport MyProfile from \"./components/MyProfileRoute/MyProfile\";\r\nimport ReactNotification from \"react-notifications-component\";\r\nimport DefaultPage from \"./components/Other/DefaultPage\";\r\nimport { FOLLOWEVENT, STOCKEVENT } from \"./graphql/queries\";\r\nimport ExplorePage from \"./components/ExploreRoute/ExplorePage\";\r\nimport SpecificExplore from \"./components/ExploreRoute/SpecificExplore\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useSubscription } from \"@apollo/client\";\r\nimport { RootState } from \".\";\r\nimport ActionsPage from \"./components/ActionsRoute/ActionsPage\";\r\nimport Reset from \"./components/Other/Reset\";\r\nimport HealthCheck from \"./components/Other/HealthCheck\";\r\n\r\n// This is the highest component in hierarchy. Displays the whole app.\r\nfunction App(): JSX.Element {\r\n    // Getting the logged user from the Redux-store.\r\n    const userLogged = useSelector<RootState, string>((state) => state.user.username);\r\n    // StockEvent-subscription.\r\n    const stockEvent = useSubscription(STOCKEVENT, {variables: {username: userLogged}});\r\n    // FollowEvent-subscription.\r\n    const followEvent = useSubscription(FOLLOWEVENT, {variables: {username: userLogged}});\r\n    // Rendering the other components.\r\n    // We user React router to display the different pages and change urls.\r\n    // ReactNotification-component is used to display notifications.\r\n    const stockSubscription = {trans: stockEvent.data?.stockEvent?.transaction, me: stockEvent.data?.stockEvent.me};\r\n    return (\r\n        <div>\r\n            <ReactNotification />\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/actions\" exact>\r\n                        <div>\r\n                            <SideBar />\r\n                            <AppBar stockSubscription={stockSubscription} />\r\n                            <ActionsPage />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path=\"/login\" exact>\r\n                        <div>\r\n                            <SideBar />\r\n                            <AppBar stockSubscription={stockSubscription} />\r\n                            <LoginPage />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path=\"/myprofile\" exact>\r\n                        {\r\n                            userLogged ?\r\n                                <div>\r\n                                    <SideBar />\r\n                                    <AppBar stockSubscription={stockSubscription}/>\r\n                                    <MyProfile \r\n                                        stockSubscription={stockEvent.data?.stockEvent?.transaction.transactionDate} \r\n                                        followSubscriptions={followEvent.data?.followEvent?.date}\r\n                                    />\r\n                                </div>\r\n                                : <Redirect to=\"/login\" />\r\n                        }\r\n                    </Route>\r\n                    <Route path=\"/buystocks\" exact>\r\n                        {\r\n                            userLogged ?\r\n                                <div>\r\n                                    <SideBar />\r\n                                    <AppBar stockSubscription={stockSubscription} />\r\n                                    <StockPage />\r\n                                </div>\r\n                                : <Redirect to=\"/login\" />\r\n                        }\r\n                    </Route>\r\n                    <Route path=\"/login\" exact>\r\n                        <div>\r\n                            <SideBar />\r\n                            <AppBar stockSubscription={stockSubscription} />\r\n                        </div>\r\n                        <LoginPage />\r\n                    </Route>\r\n                    <Route path=\"/explore\" exact>\r\n                        <div>\r\n                            <SideBar />\r\n                            <AppBar stockSubscription={stockSubscription} />\r\n                        </div>\r\n                        <ExplorePage />\r\n                    </Route>\r\n                    <Route path=\"/explore/:id\" exact>\r\n                        <div>\r\n                            <SideBar />\r\n                            <AppBar stockSubscription={stockSubscription} />\r\n                            <SpecificExplore \r\n                                followSubscriptions={followEvent.data?.followEvent?.date} \r\n                            />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path=\"/\" exact>\r\n                        <div>\r\n                            <SideBar />\r\n                            <AppBar stockSubscription={stockSubscription} />\r\n                            <DefaultPage />\r\n                        </div>\r\n                    </Route>\r\n                    <Route path=\"/testreset\" exact>\r\n                        <Reset />\r\n                    </Route>\r\n                    <Route path=\"/healthcheck\" exact> \r\n                        <HealthCheck />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <Redirect to=\"/\" />\r\n                    </Route>\r\n                </Switch>\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport sidebarReducer from \"./reducers/sidebarReducer\";\r\nimport userLoggedReducer from \"./reducers/userLoggedReducer\";\r\nimport modeSwitchReducer from \"./reducers/modeSwitchReducer\";\r\nimport buyingStockReducer from \"./reducers/buyingStockReducer\";\r\nimport { createStore, combineReducers } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport {\r\n    ApolloClient,\r\n    ApolloProvider,\r\n    HttpLink,\r\n    InMemoryCache,\r\n    split,\r\n} from \"@apollo/client\";\r\nimport { getMainDefinition } from \"@apollo/client/utilities\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport firstBuyReducer from \"./reducers/firstBuyReducer\";\r\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\r\nimport actionNotificationReducer from \"./reducers/actionNotificationReducer\";\r\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-var-requires\r\nrequire(\"dotenv\").config();\r\n\r\n// Here we  combine all our reducers into one store. This way we can easily access them in our components.\r\n// Generally combineReducer-allows us to create multiple reducers.\r\nconst reducer = combineReducers({\r\n    user: userLoggedReducer,\r\n    sidebar: sidebarReducer,\r\n    stock: buyingStockReducer,\r\n    mode: modeSwitchReducer,\r\n    purchase: firstBuyReducer,\r\n    notification: actionNotificationReducer\r\n});\r\n\r\nconsole.log(process.env);\r\n// Deciding which backend endpoint we want to use with the help of environment variables.\r\nconst gqlUri = process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"test\"\r\n    ? \"http://localhost:3001/graphql\" \r\n    : \"https://fso2021practicework.herokuapp.com/graphql\";\r\nconst httpLink = new HttpLink({ uri: gqlUri });\r\n// Deciding which websocket endpoint we want to use with the help of environment variables.\r\nconst wsUri = process.env.NODE_ENV === \"development\" || process.env.NODE_ENV === \"test\"\r\n    ? \"ws://localhost:3001/subscriptions\" \r\n    : \"wss://fso2021practicework.herokuapp.com/subscriptions\";\r\n// Creating a WebSocketLink-object, which will be used to connect to the websocket endpoint and it is a terminating lik.\r\nconst wsLink = new WebSocketLink({\r\n    uri: wsUri as string,\r\n    options: {\r\n        reconnect: true,\r\n    },\r\n});\r\n\r\n// Creating a Redux-store.\r\nconst store = createStore(reducer);\r\n\r\n// This is to use Typescript with Redux.\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\n// This is to use headers with our backend-requests, especially for authorization.\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem(\"usersToken\");\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `bearer ${token}` : null,\r\n        },\r\n    };\r\n});\r\n\r\n// Creating a splitLink that will split the incoming requests into two categories:\r\n// 1. GraphQL requests\r\n// 2. Subscription requests\r\n// The split-method takes theww parameters. First of all, it tests whether the request is a GraphQL request or not.\r\n// If it is a GraphQL request, it will use the authLink.concat(httpLink). If it is a Subscription request, it will use the wsLink.\r\nconst splitLink = split(\r\n    ({ query }) => {\r\n        const definition = getMainDefinition(query);\r\n        return (\r\n            definition.kind === \"OperationDefinition\" &&\r\n      definition.operation === \"subscription\"\r\n        );\r\n    },\r\n    wsLink,\r\n    authLink.concat(httpLink)\r\n);\r\n\r\n// Creating an Apollo-client.\r\nconst client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: splitLink,\r\n});\r\n\r\n// Rendering the website with ReactDOM-object. We also provide the Redux-store and Apollo-client to the app.\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <ApolloProvider client={client}>\r\n            <App />\r\n        </ApolloProvider>\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}