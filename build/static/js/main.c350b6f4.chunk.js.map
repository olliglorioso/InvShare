{"version":3,"sources":["styles/styles.tsx","reducers/sidebarReducer.tsx","reducers/userLoggedReducer.ts","components/AppBar.tsx","components/SideBar.tsx","graphql/queries.ts","components/LoginForm.tsx","components/LoginPage.tsx","reducers/buyingStockReducer.ts","components/MainChart.tsx","components/BuyStocks.tsx","components/StockPage.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","menuButton","marginRight","spacing","appBarTitle","flexGrow","textAlign","actionEnableSidebar","enableOrDisable","type","sidebarReducer","state","action","userLoggedReducer","localStorage","getItem","setItem","token","removeItem","MenuBar","styles","dispatch","useDispatch","location","useLocation","userState","useSelector","user","client","useApolloClient","history","useHistory","AppBar","style","background","Toolbar","IconButton","id","onClick","edge","className","color","Typography","variant","Button","to","textDecoration","fontSize","pathname","push","clear","resetStore","paper","divider","SideBar","sidebarState","sidebar","Drawer","anchor","open","onClose","classes","List","ListItem","button","AccountCircle","ListItemText","inset","primary","Divider","root","Settings","ShowChart","BUY_STOCK","gql","INDIVIDUAL_STOCK","LOGIN","CssTextField","withStyles","borderBottomColor","borderColor","TextField","LoginForm","useMutation","login","result","useEffect","data","value","e","console","log","formik","useFormik","initialValues","username","password","onSubmit","values","a","variables","handleSubmit","label","onChange","handleChange","InputProps","startAdornment","InputAdornment","position","LockRounded","width","alignContent","LoginPage","Grid","container","direction","justifyContent","minHeight","item","xs","alignItems","changePrice","price","stock","buyingStockReducer","stockName","stockPrice","MainChart","props","useQuery","company","loading","stockList","individualStock","map","b","close","date","undefined","length","options","chart","fontFamily","toolbar","show","offsetX","offsetY","tools","download","selection","zoom","zoomin","zoomout","pan","reset","autoSelected","colors","stroke","xaxis","categories","x","labels","rotate","series","name","toUpperCase","y","height","FinalInformation","amount","totalSum","parseFloat","toFixed","paddingTop","paddingBottom","PricePerStock","cPrice","MonetizationOn","Company","companyName","useState","setName","useDebounce","debounceName","event","target","autoComplete","Business","BuyStocks","cName","buyStock","price_per_stock","parseInt","Add","StockPage","buyingStockState","backgroundColor","display","flexDirection","App","path","exact","reducer","combineReducers","store","createStore","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","ApolloClient","cache","InMemoryCache","link","concat","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.c350b6f4.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    appBarTitle: {\r\n        flexGrow: 1,\r\n        textAlign: \"center\"\r\n    }\r\n}));\r\n\r\nexport default useStyles;","const sidebarReducer = (state = false, action: {type: string}): boolean => {\r\n    switch (action.type) {\r\n    case \"ENABLE\":\r\n        return true\r\n    case \"DISABLE\":\r\n        return false\r\n    default: \r\n        return state\r\n    }\r\n}\r\n\r\nexport const actionEnableSidebar = (enableOrDisable: string): {type: string} => {\r\n    return {\r\n        type: enableOrDisable\r\n    }\r\n}\r\n\r\nexport default sidebarReducer","const userLoggedReducer = (state = (typeof localStorage.getItem(\"usersToken\") === \"string\"), action: {type: string, token: string}): boolean => {\r\n    switch (action.type) {\r\n    case \"LOGIN\":\r\n        localStorage.setItem(\"usersToken\", action.token)\r\n        return true\r\n    case \"LOGOUT\":\r\n        localStorage.removeItem(\"usersToken\")\r\n        return false\r\n    default:\r\n        return state\r\n    }\r\n}\r\n\r\nexport const logUserIn = (token: string): {type: string, token: string} => {\r\n    return {\r\n        type: \"LOGIN\",\r\n        token\r\n    }\r\n}\r\n\r\nexport const logUserOut = (): {type: string} => {\r\n    return {\r\n        type: \"LOGOUT\"\r\n    }\r\n}\r\n\r\nexport default userLoggedReducer","import React from \"react\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport useStyles from \"../styles/styles\";\r\nimport { actionEnableSidebar } from \"../reducers/sidebarReducer\";\r\nimport {IconButton, AppBar, Toolbar, Typography, Button} from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\r\nimport { RootState } from \"..\";\r\nimport { useApolloClient } from \"@apollo/client\";\r\nimport { logUserOut } from \"../reducers/userLoggedReducer\";\r\n\r\nconst MenuBar = (): JSX.Element => {\r\n    const styles = useStyles()\r\n    const dispatch = useDispatch()\r\n    const location = useLocation()\r\n    const userState = useSelector<RootState, boolean>((state) => state.user)\r\n    const client = useApolloClient()\r\n    const history = useHistory()\r\n\r\n    const logOut = () => {\r\n        history.push(\"/\")\r\n        dispatch(logUserOut())\r\n        localStorage.clear()\r\n        client.resetStore()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <AppBar style={{background: \"black\"}}>\r\n                <Toolbar>\r\n                    <div>\r\n                        {userState \r\n                            ? <IconButton id=\"sideBarButton\" onClick={() => dispatch(actionEnableSidebar(\"ENABLE\"))} edge=\"start\" className={styles.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                            : <div></div>\r\n                        }\r\n                    </div>\r\n                    <Typography className={styles.appBarTitle} variant=\"h6\" >\r\n                        <Button><Link to=\"/\" style={{color: \"white\", textDecoration: \"none\", fontSize: 20}}>InvShare</Link></Button>\r\n                    </Typography>\r\n                    {location.pathname === \"/login\"\r\n                        ? <div></div>\r\n                        : userState\r\n                            ? <div></div>\r\n                            : <Button id=\"loginButton\" color='inherit'><Link to=\"/login\" style={{color: \"white\", textDecoration: \"none\"}}>Log in</Link></Button>\r\n                    }  \r\n                    {userState\r\n                        ? <Button onClick={() => logOut()} style={{color: \"white\"}}>Log out</Button>\r\n                        : <div></div>\r\n                    }  \r\n                    \r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuBar;","import React from \"react\"\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ListItem, List, Divider, ListItemText, Drawer } from \"@material-ui/core\";\r\nimport { actionEnableSidebar } from \"../reducers/sidebarReducer\";\r\nimport { RootState } from \"..\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { AccountCircle, Settings, ShowChart } from \"@material-ui/icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n    paper: {\r\n        background: \"black\",\r\n        color: \"white\"\r\n    },\r\n    divider: {\r\n        background: \"white\"\r\n    }\r\n})\r\n\r\nconst SideBar = (): JSX.Element => {\r\n    const dispatch = useDispatch()\r\n    const sidebarState = useSelector<RootState, boolean>((state) => state.sidebar)\r\n    const styles = useStyles()\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <div>\r\n            <Drawer \r\n                anchor='left'\r\n                open={sidebarState}\r\n                onClose={() => {dispatch(actionEnableSidebar(\"DISABLE\"))}}\r\n                classes={{paper: styles.paper}}\r\n            >\r\n                <div>\r\n                    \r\n                    <List>\r\n                        <ListItem button onClick={() => {return}}>\r\n                            <AccountCircle /><ListItemText inset={true} primary={\"My profile\"} />\r\n                        </ListItem>\r\n                        <Divider classes={{root: styles.divider}} />\r\n                        <ListItem button onClick={() => {return}}>\r\n                            <Settings/><ListItemText inset={true} primary={\"Settings\"} />\r\n                        </ListItem>\r\n                        <Divider classes={{root: styles.divider}} />\r\n                        <ListItem button onClick={() => history.push(\"/mystocks\")}>\r\n                            <ShowChart /><ListItemText inset={true} primary={\"Buy stocks\"} />\r\n                        </ListItem>\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideBar","import {gql} from \"@apollo/client\"\r\n\r\nconst ADD_USER = gql`\r\nmutation addUser($addUserUsername: String!, $addUserPassword: String!) {\r\n    addUser(username: $addUserUsername, password: $addUserPassword) {\r\n        username\r\n        passwordHash\r\n    }\r\n  }\r\n`\r\n\r\nexport const BUY_STOCK = gql`\r\nmutation buyStock($stockName: String!, $amount: Int!) {\r\n  buyStock(stockName: $stockName, amount: $amount) {\r\n    transactionDate\r\n    transactionStock\r\n    transactionStockAmount\r\n    transactionStockPrice\r\n  }\r\n}\r\n`\r\n\r\nexport const INDIVIDUAL_STOCK = gql`\r\n  query individualStock($company: String!) {\r\n    individualStock (company: $company) {\r\n      close\r\n      date\r\n      high\r\n      low\r\n      open\r\n      volume\r\n    }\r\n  }\r\n`\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password)  {\r\n      value\r\n    }\r\n  }\r\n`\r\n\r\nexport default ADD_USER","import React from \"react\"\r\nimport {useFormik} from \"formik\"\r\nimport { Button, TextField, InputAdornment } from \"@material-ui/core\";\r\nimport { AccountCircle, LockRounded } from \"@material-ui/icons\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport { LOGIN } from \"../graphql/queries\"\r\nimport {useMutation} from \"@apollo/client\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {logUserIn} from \"../reducers/userLoggedReducer\"\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n        \"& label.Mui-focused\": {\r\n            color: \"grey\",\r\n        },\r\n        \"& .MuiInput-underline:after\": {\r\n            borderBottomColor: \"black\",\r\n        },\r\n        \"& .MuiOutlinedInput-root\": {\r\n            \"& fieldset\": {\r\n                borderColor: \"grey\",\r\n            },\r\n            \"&:hover fieldset\": {\r\n                borderColor: \"grey\",\r\n            },\r\n            \"&.Mui-focused fieldset\": {\r\n                borderColor: \"black\",\r\n            },\r\n        },\r\n    },\r\n})(TextField);\r\n\r\n\r\nconst LoginForm = (): JSX.Element => {\r\n    const [login, result] = useMutation(LOGIN)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            dispatch(logUserIn(result.data.login.value))\r\n            history.push(\"/\")\r\n        } catch (e) {\r\n            console.log(\"ei ole olemassa käyttäjää\")\r\n        }\r\n  }, [result.data]) // eslint-disable-line\r\n\r\n    const history = useHistory()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: \"\",\r\n            password: \"\",\r\n        },\r\n        onSubmit: async (values: {username: string, password: string}) => {\r\n            await login({variables: {username: values.username, password: values.password}})\r\n        },\r\n    });\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <CssTextField\r\n                id=\"username\"\r\n                type=\"username\"\r\n                variant=\"outlined\"\r\n                label=\"Username\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.username}\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <AccountCircle />\r\n                        </InputAdornment>\r\n                    )\r\n                }}\r\n            />\r\n            <p></p>\r\n            <CssTextField\r\n                id=\"password\"\r\n                type=\"password\"\r\n                variant=\"outlined\"\r\n                label=\"Password\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.password}\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <LockRounded />\r\n                        </InputAdornment>\r\n                    )\r\n                }}\r\n            />\r\n            <p></p>\r\n            <Button id=\"tryToLoginButton\" variant=\"contained\" type=\"submit\" style={{background: \"black\", color: \"white\", width: 255}}>Log in</Button>\r\n            <p style={{fontSize: 20, alignContent: \"center\"}}></p>\r\n        </form>\r\n      \r\n    );\r\n}\r\n\r\nexport default LoginForm","import React from \"react\"\r\nimport SideBar from \"./SideBar\"\r\nimport MenuBar from \"./AppBar\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport LoginForm from \"./LoginForm\"\r\n// import SignUpForm from './SignUpForm'\r\n\r\nconst LoginPage = (): JSX.Element => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <SideBar />\r\n                <MenuBar />\r\n            </div>\r\n            <div>\r\n                <Grid\r\n                    container\r\n                    spacing={0}\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    style={{minHeight: \"100vh\"}}\r\n                >\r\n                    <Grid container item xs={5} alignItems=\"center\" justifyContent=\"center\">\r\n                        <LoginForm />\r\n                    </Grid>\r\n                    {/* <Grid container item xs={5} justifyContent=\"center\" alignItems=\"center\">\r\n                        <SignUpForm />\r\n                    </Grid> */}\r\n                </Grid>\r\n                \r\n                <Grid\r\n                    container\r\n                    spacing={0}\r\n                    direction=\"column\"\r\n                    style={{minHeight: \"100vh\"}}\r\n                >\r\n                    \r\n                </Grid>\r\n            </div>\r\n            \r\n        </div>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nexport default LoginPage","\r\nconst buyingStockReducer = (state = {stockName: \"\", stockPrice: 0.0}, action: {type: string, stock: string, price: number}): {stockName: string, stockPrice: number}=> {\r\n    switch (action.type) {\r\n    case \"CHANGE_STOCK\":\r\n        return {...state, stockName: action.stock}\r\n    case \"CHANGE_PRICE\":\r\n        return {...state, stockPrice: action.price}\r\n    default: \r\n        return state\r\n    }\r\n}\r\n\r\nexport const changeStock = (stock: string): {type: string, stock: string, price: number} => {\r\n    return {\r\n        type: \"CHANGE_STOCK\",\r\n        stock: stock,\r\n        price: 0.0\r\n    }\r\n}\r\n\r\nexport const changePrice = (price: number): {type: string, stock: string, price: number} => {\r\n    return {\r\n        type: \"CHANGE_PRICE\",\r\n        stock: \"moikka\",\r\n        price: price\r\n    }\r\n}\r\n\r\nexport default buyingStockReducer","import React from \"react\";\r\nimport Chart from \"react-apexcharts\"\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { INDIVIDUAL_STOCK } from \"../graphql/queries\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { changePrice } from \"../reducers/buyingStockReducer\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst MainChart = (props: {stock: string}): JSX.Element => {\r\n    const {data, loading} = useQuery(INDIVIDUAL_STOCK, {variables: {company: props.stock}})\r\n    const dispatch = useDispatch()\r\n\r\n    if (loading) {<div></div>}\r\n    if (!data) {<div></div>}\r\n\r\n    let stockList: {close: number, date: string}[]= []\r\n    if (data) {\r\n        stockList = data.individualStock.map((b: {__typename: string, close: number, date: string}): {close: number, date: string} => {return {close: b.close, date: b.date}})\r\n    }\r\n  \r\n    useEffect(() => {\r\n        if (stockList && stockList[stockList.length - 1] !== undefined) {\r\n            dispatch(changePrice(stockList[stockList.length - 1].close))\r\n        }\r\n        if (stockList && stockList.length === 0) {\r\n            dispatch(changePrice(0))\r\n        }\r\n    },[data])\r\n  \r\n\r\n    const myString = \"zoom\"\r\n    const myOption: \"zoom\" | \"selection\" | \"pan\" | undefined = myString as \"zoom\" | \"selection\" | \"pan\" | undefined \r\n\r\n    const myDateOption = \"datetime\"\r\n    const myOption2: \"datetime\" | \"category\" | \"numeric\" | undefined = myDateOption as \"datetime\" | \"category\" | \"numeric\" | undefined\r\n\r\n    const options = {\r\n        chart: {\r\n            id: \"tesla_börse\",\r\n            fontFamily: \"Roboto\",\r\n            background: \"FFFFFF\",\r\n            toolbar: {\r\n                show: true,\r\n                offsetX: 0,\r\n                offsetY: 0,\r\n                tools: {\r\n                    download: false,\r\n                    selection: false,\r\n                    zoom: \"<img src=\\\"https://image.flaticon.com/icons/png/512/1086/1086933.png\\\" style=\\\"padding-top: 3px;\\\" width=\\\"22\\\">\",\r\n                    zoomin: false,\r\n                    zoomout: false,\r\n                    pan: \"<img src=\\\"https://image.flaticon.com/icons/png/512/1/1427.png\\\" width=\\\"30\\\">\",\r\n                    reset: \"<img src=\\\"https://image.flaticon.com/icons/png/512/32/32303.png\\\" width=\\\"22\\\" style=\\\"padding-top: 3px;\\\">\"\r\n                },\r\n                autoSelected: myOption,\r\n            },\r\n        },\r\n        colors: [\"#000000\", \"#000000\"],\r\n        stroke: {\r\n            width: 1\r\n        },\r\n        xaxis: {\r\n            categories: stockList.map((x: {close: number, date: string}) => x.date),\r\n            type: myOption2,\r\n            labels: {\r\n                rotate: 0\r\n            }\r\n        }\r\n    }\r\n    const series = [{\r\n        name: props.stock.toUpperCase(),\r\n        data: stockList.map((y: {close: number, date: string}) => y.close) || [0],\r\n    }]\r\n\r\n    return (\r\n        <div>\r\n            <Chart \r\n                options={options}\r\n                series={series}\r\n                type='line'\r\n                height={350}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainChart","import React, { useEffect, useState } from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport { withStyles } from \"@material-ui/styles\";\r\nimport { TextField, Button, Typography } from \"@material-ui/core\";\r\nimport { InputAdornment } from \"@material-ui/core\";\r\nimport { Business, MonetizationOn, Add } from \"@material-ui/icons\";\r\nimport { changeStock } from \"../reducers/buyingStockReducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"..\";\r\nimport { useDebounce } from \"use-debounce\"\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { BUY_STOCK } from \"../graphql/queries\"\r\n\r\ninterface MyFormValues {\r\n    company: string,\r\n    amount: string,\r\n    price_per_stock: string\r\n}\r\n\r\nconst CssTextField = withStyles({\r\n    root: {\r\n        \"& label.Mui-focused\": {\r\n            color: \"grey\",\r\n        },\r\n        \"& .MuiInput-underline:after\": {\r\n            borderBottomColor: \"black\",\r\n        },\r\n        \"& .MuiOutlinedInput-root\": {\r\n            \"& fieldset\": {\r\n                borderColor: \"grey\",\r\n            },\r\n            \"&:hover fieldset\": {\r\n                borderColor: \"grey\",\r\n            },\r\n            \"&.Mui-focused fieldset\": {\r\n                borderColor: \"black\",\r\n            },\r\n        },\r\n    },\r\n})(TextField);\r\n\r\nconst FinalInformation = ({price, amount}: {price: number, amount: string}) => {\r\n    let totalSum = \"Total: 0.00\"\r\n    if (price !== 0 && amount !== \"0\" && amount !== \"\") {\r\n        totalSum = `Total: ${(price * parseFloat(amount)).toFixed(2)}$`\r\n    }\r\n    return (\r\n        <Typography style={{paddingTop: 5, paddingBottom: 5}}>{totalSum}</Typography>\r\n    )\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst PricePerStock = ({price, handleChange}: {price: number, handleChange: any}) => {\r\n    let cPrice = price\r\n    useEffect(() => {\r\n        cPrice = price\r\n    }, [price])\r\n\r\n    return (\r\n        <CssTextField\r\n            id=\"price_per_stock\"\r\n            type=\"price_per_stock\"\r\n            variant=\"outlined\"\r\n            label=\"Price per stock\"\r\n            onChange={handleChange}\r\n            value={cPrice}\r\n            InputProps={{\r\n                startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                        <MonetizationOn />\r\n                    </InputAdornment>\r\n                )\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nconst Company = ({companyName}: {companyName: string}) => {\r\n    const [name, setName] = useState(companyName)\r\n    const dispatch = useDispatch()\r\n    const [debounceName] = useDebounce(name, 2000)\r\n\r\n    useEffect(() => {\r\n        dispatch(changeStock(debounceName))\r\n    }, [debounceName])\r\n\r\n    const onChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setName(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CssTextField\r\n                id=\"company\"\r\n                autoComplete=\"off\"\r\n                type=\"company\"\r\n                variant=\"outlined\"\r\n                label=\"Company\"\r\n                onChange={onChange}\r\n                value={name}\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <Business />\r\n                        </InputAdornment>\r\n                    )\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst BuyStocks = (): JSX.Element => {\r\n    const price = useSelector<RootState, number>((state) => state.stock.stockPrice)\r\n    const cName = useSelector<RootState, string>((state) => state.stock.stockName)\r\n    const initialValues: MyFormValues = { company: \"\", amount: \"1\", price_per_stock: \"\" };\r\n    const [buyStock, {data}] = useMutation(BUY_STOCK)\r\n    console.log(data)\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={(values) => {\r\n                    buyStock({variables: {stockName: cName.toUpperCase(), amount: parseInt(values.amount)}})\r\n                }}\r\n            >\r\n                {({\r\n                    handleSubmit, values, handleChange\r\n                }) => (\r\n                    <form onSubmit={handleSubmit}>\r\n                        <Company companyName={values.company}/>\r\n                        <p></p>\r\n                        <CssTextField\r\n                            id=\"amount\"\r\n                            type=\"number\"\r\n                            variant=\"outlined\"\r\n                            label=\"Amount\"\r\n                            onChange={handleChange}\r\n                            value={values.amount}\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <Add />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                        />\r\n                        <p></p>\r\n                        <PricePerStock price={price} handleChange={handleChange} />\r\n                        <FinalInformation price={price} amount={values.amount} />\r\n                        <Button variant=\"contained\" type=\"submit\" style={{background: \"black\", color: \"white\", width: 255}}>Buy</Button>\r\n                        <p style={{fontSize: 20, alignContent: \"center\"}}></p>\r\n                    </form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default BuyStocks","import React from \"react\";\r\nimport SideBar from \"./SideBar\"\r\nimport MenuBar from \"./AppBar\"\r\nimport MainChart from \"./MainChart\";\r\nimport BuyStocks from \"./BuyStocks\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"..\";\r\n\r\nconst StockPage = (): JSX.Element => {\r\n    const buyingStockState = useSelector<RootState, string>((state) => state.stock.stockName)\r\n\r\n    return (\r\n        <div style={{\r\n            backgroundColor: \"white\",\r\n            textAlign: \"center\",\r\n            paddingTop: 100\r\n        }}>\r\n            <div>\r\n                <SideBar />\r\n                <MenuBar />\r\n            </div>\r\n            <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\"}}>\r\n                <div style={{width: \"100%\"}}>\r\n                    <MainChart stock={buyingStockState} />\r\n                </div>\r\n                <div style={{paddingTop: 15, width: 500}}>\r\n                    <BuyStocks />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StockPage","import React from \"react\";\r\nimport MenuBar from \"./components/AppBar\";\r\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\r\nimport LoginPage from \"./components/LoginPage\";\r\nimport StockPage from \"./components/StockPage\";\r\nimport SideBar from \"./components/SideBar\";\r\n\r\nfunction App(): JSX.Element {\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route path=\"/\" exact>\r\n                    <div>\r\n                        <SideBar />\r\n                        <MenuBar  />\r\n                    </div>\r\n                </Route>\r\n                <Route path=\"/mystocks\" exact>\r\n                    <StockPage />\r\n                </Route>\r\n                <Route path=\"/login\" exact>\r\n                    <LoginPage />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    \r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport sidebarReducer from \"./reducers/sidebarReducer\";\r\nimport userLoggedReducer from \"./reducers/userLoggedReducer\";\r\nimport buyingStockReducer from \"./reducers/buyingStockReducer\"\r\nimport { createStore, combineReducers } from \"redux\";\r\nimport { Provider } from \"react-redux\"\r\nimport {ApolloClient, ApolloProvider, HttpLink, InMemoryCache} from \"@apollo/client\"\r\nimport { setContext } from \"@apollo/client/link/context\"\r\n\r\nconst reducer = combineReducers({\r\n    user: userLoggedReducer,\r\n    sidebar: sidebarReducer,\r\n    stock: buyingStockReducer\r\n})\r\n\r\nconst store = createStore(reducer)\r\nexport type RootState = ReturnType<typeof store.getState>\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem(\"usersToken\")\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `bearer ${token}` : null,\r\n        }\r\n    }\r\n})\r\n  \r\nconst httpLink = new HttpLink({ uri: \"https://fso2021practicework.herokuapp.com/graphql\" })\r\n\r\nconst client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: authLink.concat(httpLink)\r\n})\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <ApolloProvider client={client}>\r\n                <App />\r\n            </ApolloProvider>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}